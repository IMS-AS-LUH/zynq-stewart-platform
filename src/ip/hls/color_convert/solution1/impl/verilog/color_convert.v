// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="color_convert_color_convert,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.520000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1669,HLS_SYN_LUT=1871,HLS_VERSION=2021_2}" *)

module color_convert (
        ap_local_block,
        ap_clk,
        ap_rst_n,
        stream_in_24_TDATA,
        stream_in_24_TVALID,
        stream_in_24_TREADY,
        stream_in_24_TKEEP,
        stream_in_24_TSTRB,
        stream_in_24_TUSER,
        stream_in_24_TLAST,
        stream_out_24_TDATA,
        stream_out_24_TVALID,
        stream_out_24_TREADY,
        stream_out_24_TKEEP,
        stream_out_24_TSTRB,
        stream_out_24_TUSER,
        stream_out_24_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

output   ap_local_block;
input   ap_clk;
input   ap_rst_n;
input  [23:0] stream_in_24_TDATA;
input   stream_in_24_TVALID;
output   stream_in_24_TREADY;
input  [2:0] stream_in_24_TKEEP;
input  [2:0] stream_in_24_TSTRB;
input  [0:0] stream_in_24_TUSER;
input  [0:0] stream_in_24_TLAST;
output  [23:0] stream_out_24_TDATA;
output   stream_out_24_TVALID;
input   stream_out_24_TREADY;
output  [2:0] stream_out_24_TKEEP;
output  [2:0] stream_out_24_TSTRB;
output  [0:0] stream_out_24_TUSER;
output  [0:0] stream_out_24_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

wire   [0:0] ap_local_deadlock;
 reg    ap_rst_n_inv;
wire   [9:0] c1_c1;
wire   [9:0] c1_c2;
wire   [9:0] c1_c3;
wire   [9:0] c2_c1;
wire   [9:0] c2_c2;
wire   [9:0] c2_c3;
wire   [9:0] c3_c1;
wire   [9:0] c3_c2;
wire   [9:0] c3_c3;
wire   [9:0] bias_c1;
wire   [9:0] bias_c2;
wire   [9:0] bias_c3;
reg    stream_in_24_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    stream_out_24_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [2:0] tmp_keep_V_reg_1196;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_state6_pp0_stage0_iter5;
wire    regslice_both_stream_out_24_V_data_V_U_apdone_blk;
reg    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg   [2:0] tmp_keep_V_reg_1196_pp0_iter1_reg;
reg   [2:0] tmp_keep_V_reg_1196_pp0_iter2_reg;
reg   [2:0] tmp_keep_V_reg_1196_pp0_iter3_reg;
reg   [2:0] tmp_keep_V_reg_1196_pp0_iter4_reg;
reg   [2:0] tmp_strb_V_reg_1201;
reg   [2:0] tmp_strb_V_reg_1201_pp0_iter1_reg;
reg   [2:0] tmp_strb_V_reg_1201_pp0_iter2_reg;
reg   [2:0] tmp_strb_V_reg_1201_pp0_iter3_reg;
reg   [2:0] tmp_strb_V_reg_1201_pp0_iter4_reg;
reg   [0:0] tmp_user_V_reg_1206;
reg   [0:0] tmp_user_V_reg_1206_pp0_iter1_reg;
reg   [0:0] tmp_user_V_reg_1206_pp0_iter2_reg;
reg   [0:0] tmp_user_V_reg_1206_pp0_iter3_reg;
reg   [0:0] tmp_user_V_reg_1206_pp0_iter4_reg;
reg   [0:0] tmp_last_V_reg_1211;
reg   [0:0] tmp_last_V_reg_1211_pp0_iter1_reg;
reg   [0:0] tmp_last_V_reg_1211_pp0_iter2_reg;
reg   [0:0] tmp_last_V_reg_1211_pp0_iter3_reg;
reg   [0:0] tmp_last_V_reg_1211_pp0_iter4_reg;
wire   [7:0] v_p1_V_fu_273_p1;
reg   [7:0] v_p1_V_reg_1216;
reg   [7:0] v_p2_V_reg_1221;
reg   [7:0] v_p3_V_reg_1226;
reg   [7:0] v_p3_V_reg_1226_pp0_iter1_reg;
reg  signed [9:0] c1_c1_read_reg_1231;
reg  signed [9:0] c1_c2_read_reg_1236;
reg   [9:0] c1_c3_read_reg_1241;
reg  signed [9:0] c1_c3_read_reg_1241_pp0_iter1_reg;
reg   [9:0] rhs_2_reg_1246;
reg   [9:0] rhs_2_reg_1246_pp0_iter1_reg;
reg   [9:0] rhs_2_reg_1246_pp0_iter2_reg;
wire   [7:0] trunc_ln1245_3_fu_297_p1;
reg   [7:0] trunc_ln1245_3_reg_1251;
reg   [7:0] trunc_ln1245_3_reg_1251_pp0_iter1_reg;
reg   [7:0] trunc_ln1245_3_reg_1251_pp0_iter2_reg;
reg  signed [9:0] c2_c1_read_reg_1256;
reg  signed [9:0] c2_c2_read_reg_1261;
reg   [9:0] c2_c3_read_reg_1266;
reg  signed [9:0] c2_c3_read_reg_1266_pp0_iter1_reg;
reg   [9:0] rhs_6_reg_1271;
reg   [9:0] rhs_6_reg_1271_pp0_iter1_reg;
reg   [9:0] rhs_6_reg_1271_pp0_iter2_reg;
wire   [7:0] trunc_ln1245_8_fu_301_p1;
reg   [7:0] trunc_ln1245_8_reg_1276;
reg   [7:0] trunc_ln1245_8_reg_1276_pp0_iter1_reg;
reg   [7:0] trunc_ln1245_8_reg_1276_pp0_iter2_reg;
reg  signed [9:0] c3_c1_read_reg_1281;
reg  signed [9:0] c3_c2_read_reg_1286;
reg   [9:0] c3_c3_read_reg_1291;
reg  signed [9:0] c3_c3_read_reg_1291_pp0_iter1_reg;
reg   [9:0] rhs_10_reg_1296;
reg   [9:0] rhs_10_reg_1296_pp0_iter1_reg;
reg   [9:0] rhs_10_reg_1296_pp0_iter2_reg;
wire   [7:0] trunc_ln1245_14_fu_305_p1;
reg   [7:0] trunc_ln1245_14_reg_1301;
reg   [7:0] trunc_ln1245_14_reg_1301_pp0_iter1_reg;
reg   [7:0] trunc_ln1245_14_reg_1301_pp0_iter2_reg;
wire  signed [17:0] r_V_fu_315_p2;
reg  signed [17:0] r_V_reg_1306;
wire   [15:0] trunc_ln1168_fu_321_p1;
reg   [15:0] trunc_ln1168_reg_1311;
wire  signed [17:0] r_V_4_fu_331_p2;
reg  signed [17:0] r_V_4_reg_1316;
wire   [15:0] trunc_ln1168_1_fu_337_p1;
reg   [15:0] trunc_ln1168_1_reg_1321;
wire  signed [17:0] r_V_6_fu_344_p2;
reg  signed [17:0] r_V_6_reg_1326;
wire   [15:0] trunc_ln1168_2_fu_350_p1;
reg   [15:0] trunc_ln1168_2_reg_1331;
wire  signed [17:0] r_V_7_fu_357_p2;
reg  signed [17:0] r_V_7_reg_1336;
wire   [15:0] trunc_ln1168_3_fu_363_p1;
reg   [15:0] trunc_ln1168_3_reg_1341;
wire  signed [17:0] r_V_9_fu_370_p2;
reg  signed [17:0] r_V_9_reg_1346;
wire   [15:0] trunc_ln1168_4_fu_376_p1;
reg   [15:0] trunc_ln1168_4_reg_1351;
wire  signed [17:0] r_V_10_fu_383_p2;
reg  signed [17:0] r_V_10_reg_1356;
wire   [15:0] trunc_ln1168_5_fu_389_p1;
reg   [15:0] trunc_ln1168_5_reg_1361;
wire   [15:0] add_ln1245_1_fu_399_p2;
reg   [15:0] add_ln1245_1_reg_1366;
wire   [18:0] ret_V_fu_403_p2;
reg   [18:0] ret_V_reg_1371;
wire  signed [17:0] r_V_5_fu_415_p2;
reg  signed [17:0] r_V_5_reg_1376;
wire   [7:0] trunc_ln1245_fu_421_p1;
reg   [7:0] trunc_ln1245_reg_1381;
wire   [7:0] trunc_ln1245_1_fu_425_p1;
reg   [7:0] trunc_ln1245_1_reg_1386;
wire   [15:0] trunc_ln1245_2_fu_429_p1;
reg   [15:0] trunc_ln1245_2_reg_1391;
wire   [15:0] add_ln1245_10_fu_439_p2;
reg   [15:0] add_ln1245_10_reg_1396;
wire   [18:0] ret_V_3_fu_443_p2;
reg   [18:0] ret_V_3_reg_1401;
wire  signed [17:0] r_V_8_fu_452_p2;
reg  signed [17:0] r_V_8_reg_1406;
wire   [7:0] trunc_ln1245_5_fu_458_p1;
reg   [7:0] trunc_ln1245_5_reg_1411;
wire   [7:0] trunc_ln1245_6_fu_462_p1;
reg   [7:0] trunc_ln1245_6_reg_1416;
wire   [15:0] trunc_ln1245_7_fu_466_p1;
reg   [15:0] trunc_ln1245_7_reg_1421;
wire   [15:0] add_ln1245_17_fu_476_p2;
reg   [15:0] add_ln1245_17_reg_1426;
wire   [18:0] ret_V_6_fu_480_p2;
reg   [18:0] ret_V_6_reg_1431;
wire  signed [17:0] r_V_11_fu_489_p2;
reg  signed [17:0] r_V_11_reg_1436;
wire   [7:0] trunc_ln1245_10_fu_495_p1;
reg   [7:0] trunc_ln1245_10_reg_1441;
wire   [7:0] trunc_ln1245_11_fu_499_p1;
reg   [7:0] trunc_ln1245_11_reg_1446;
wire   [15:0] trunc_ln1245_12_fu_503_p1;
reg   [15:0] trunc_ln1245_12_reg_1451;
reg   [0:0] p_Result_s_reg_1456;
reg   [0:0] p_Result_s_reg_1456_pp0_iter4_reg;
reg   [7:0] p_Val2_2_reg_1463;
reg   [0:0] p_Result_1_reg_1468;
reg   [0:0] tmp_5_reg_1474;
reg   [6:0] trunc_ln415_3_reg_1480;
reg   [3:0] tmp_1_reg_1485;
reg   [0:0] p_Result_2_reg_1491;
reg   [0:0] p_Result_2_reg_1491_pp0_iter4_reg;
reg   [7:0] p_Val2_5_reg_1498;
reg   [0:0] p_Result_3_reg_1503;
reg   [0:0] tmp_9_reg_1509;
reg   [6:0] trunc_ln415_4_reg_1515;
reg   [3:0] tmp_reg_1520;
reg   [0:0] p_Result_4_reg_1526;
reg   [0:0] p_Result_4_reg_1526_pp0_iter4_reg;
reg   [7:0] p_Val2_8_reg_1533;
reg   [0:0] p_Result_5_reg_1538;
reg   [0:0] tmp_13_reg_1544;
reg   [6:0] trunc_ln415_5_reg_1550;
reg   [3:0] tmp_2_reg_1555;
wire   [7:0] p_Val2_3_fu_825_p2;
reg   [7:0] p_Val2_3_reg_1561;
wire   [6:0] add_ln775_fu_830_p2;
reg   [6:0] add_ln775_reg_1567;
wire   [0:0] or_ln794_fu_874_p2;
reg   [0:0] or_ln794_reg_1572;
wire   [0:0] and_ln790_fu_885_p2;
reg   [0:0] and_ln790_reg_1578;
wire   [7:0] p_Val2_6_fu_896_p2;
reg   [7:0] p_Val2_6_reg_1584;
wire   [6:0] add_ln775_1_fu_901_p2;
reg   [6:0] add_ln775_1_reg_1590;
wire   [0:0] or_ln794_1_fu_945_p2;
reg   [0:0] or_ln794_1_reg_1595;
wire   [0:0] and_ln790_1_fu_956_p2;
reg   [0:0] and_ln790_1_reg_1601;
wire   [7:0] p_Val2_9_fu_967_p2;
reg   [7:0] p_Val2_9_reg_1607;
wire   [6:0] add_ln775_2_fu_972_p2;
reg   [6:0] add_ln775_2_reg_1613;
wire   [0:0] or_ln794_2_fu_1016_p2;
reg   [0:0] or_ln794_2_reg_1618;
wire   [0:0] and_ln790_2_fu_1027_p2;
reg   [0:0] and_ln790_2_reg_1624;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] r_V_fu_315_p1;
wire   [17:0] zext_ln1171_fu_309_p1;
wire   [7:0] r_V_4_fu_331_p1;
wire   [17:0] zext_ln1171_1_fu_325_p1;
wire   [7:0] r_V_6_fu_344_p1;
wire   [7:0] r_V_7_fu_357_p1;
wire   [7:0] r_V_9_fu_370_p1;
wire   [7:0] r_V_10_fu_383_p1;
wire  signed [18:0] sext_ln712_1_fu_396_p1;
wire  signed [18:0] sext_ln712_fu_393_p1;
wire   [7:0] r_V_5_fu_415_p1;
wire   [17:0] zext_ln1171_2_fu_409_p1;
wire  signed [18:0] sext_ln712_5_fu_436_p1;
wire  signed [18:0] sext_ln712_4_fu_433_p1;
wire   [7:0] r_V_8_fu_452_p1;
wire  signed [18:0] sext_ln712_9_fu_473_p1;
wire  signed [18:0] sext_ln712_8_fu_470_p1;
wire   [7:0] r_V_11_fu_489_p1;
wire  signed [19:0] sext_ln712_2_fu_507_p1;
wire  signed [19:0] sext_ln712_3_fu_510_p1;
wire   [17:0] rhs_3_fu_519_p3;
wire  signed [19:0] sext_ln1245_fu_526_p1;
wire   [19:0] ret_V_1_fu_513_p2;
wire   [15:0] trunc_ln1245_4_fu_534_p3;
wire   [15:0] add_ln1245_fu_530_p2;
wire   [19:0] ret_V_2_fu_541_p2;
wire   [15:0] add_ln1245_3_fu_551_p2;
wire   [7:0] add_ln1245_2_fu_547_p2;
wire  signed [19:0] sext_ln712_6_fu_611_p1;
wire  signed [19:0] sext_ln712_7_fu_614_p1;
wire   [17:0] rhs_7_fu_623_p3;
wire  signed [19:0] sext_ln1245_1_fu_630_p1;
wire   [19:0] ret_V_4_fu_617_p2;
wire   [15:0] trunc_ln1245_9_fu_638_p3;
wire   [15:0] add_ln1245_6_fu_634_p2;
wire   [19:0] ret_V_5_fu_645_p2;
wire   [15:0] add_ln1245_9_fu_655_p2;
wire   [7:0] add_ln1245_8_fu_651_p2;
wire  signed [19:0] sext_ln712_10_fu_715_p1;
wire  signed [19:0] sext_ln712_11_fu_718_p1;
wire   [17:0] rhs_11_fu_727_p3;
wire  signed [19:0] sext_ln1245_2_fu_734_p1;
wire   [19:0] ret_V_7_fu_721_p2;
wire   [15:0] trunc_ln1245_s_fu_742_p3;
wire   [15:0] add_ln1245_12_fu_738_p2;
wire   [19:0] ret_V_8_fu_749_p2;
wire   [15:0] add_ln1245_15_fu_759_p2;
wire   [7:0] add_ln1245_14_fu_755_p2;
wire   [7:0] zext_ln415_fu_819_p1;
wire   [6:0] zext_ln415_1_fu_822_p1;
wire   [0:0] tmp_6_fu_845_p3;
wire   [0:0] Range1_all_zeros_fu_840_p2;
wire   [0:0] Range1_all_ones_fu_835_p2;
wire   [0:0] select_ln787_fu_859_p3;
wire   [0:0] deleted_zeros_fu_867_p3;
wire   [0:0] carry_1_fu_853_p2;
wire   [0:0] and_ln790_3_fu_879_p2;
wire   [7:0] zext_ln415_2_fu_890_p1;
wire   [6:0] zext_ln415_3_fu_893_p1;
wire   [0:0] tmp_10_fu_916_p3;
wire   [0:0] Range1_all_zeros_1_fu_911_p2;
wire   [0:0] Range1_all_ones_1_fu_906_p2;
wire   [0:0] select_ln787_1_fu_930_p3;
wire   [0:0] deleted_zeros_1_fu_938_p3;
wire   [0:0] carry_3_fu_924_p2;
wire   [0:0] and_ln790_4_fu_950_p2;
wire   [7:0] zext_ln415_4_fu_961_p1;
wire   [6:0] zext_ln415_5_fu_964_p1;
wire   [0:0] tmp_14_fu_987_p3;
wire   [0:0] Range1_all_zeros_2_fu_982_p2;
wire   [0:0] Range1_all_ones_2_fu_977_p2;
wire   [0:0] select_ln787_2_fu_1001_p3;
wire   [0:0] deleted_zeros_2_fu_1009_p3;
wire   [0:0] carry_5_fu_995_p2;
wire   [0:0] and_ln790_5_fu_1021_p2;
wire   [6:0] select_ln396_fu_1042_p3;
wire   [0:0] neg_src_fu_1037_p2;
wire   [0:0] and_ln709_fu_1052_p2;
wire   [0:0] overflow_fu_1032_p2;
wire   [7:0] zext_ln709_fu_1048_p1;
wire   [7:0] select_ln709_fu_1063_p3;
wire   [0:0] or_ln709_fu_1057_p2;
wire   [7:0] select_ln394_fu_1069_p3;
wire   [6:0] select_ln396_1_fu_1093_p3;
wire   [0:0] neg_src_6_fu_1088_p2;
wire   [0:0] and_ln709_1_fu_1103_p2;
wire   [0:0] overflow_1_fu_1083_p2;
wire   [7:0] zext_ln709_1_fu_1099_p1;
wire   [7:0] select_ln709_1_fu_1114_p3;
wire   [0:0] or_ln709_1_fu_1108_p2;
wire   [7:0] select_ln394_1_fu_1120_p3;
wire   [6:0] select_ln396_2_fu_1144_p3;
wire   [0:0] neg_src_7_fu_1139_p2;
wire   [0:0] and_ln709_2_fu_1154_p2;
wire   [0:0] overflow_2_fu_1134_p2;
wire   [7:0] zext_ln709_2_fu_1150_p1;
wire   [7:0] select_ln709_2_fu_1165_p3;
wire   [0:0] or_ln709_2_fu_1159_p2;
wire   [7:0] select_ln394_2_fu_1171_p3;
wire   [7:0] out3_V_fu_1178_p3;
wire   [7:0] out2_V_fu_1127_p3;
wire   [7:0] out1_V_fu_1076_p3;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_stream_in_24_V_data_V_U_apdone_blk;
wire   [23:0] stream_in_24_TDATA_int_regslice;
wire    stream_in_24_TVALID_int_regslice;
reg    stream_in_24_TREADY_int_regslice;
wire    regslice_both_stream_in_24_V_data_V_U_ack_in;
wire    regslice_both_stream_in_24_V_keep_V_U_apdone_blk;
wire   [2:0] stream_in_24_TKEEP_int_regslice;
wire    regslice_both_stream_in_24_V_keep_V_U_vld_out;
wire    regslice_both_stream_in_24_V_keep_V_U_ack_in;
wire    regslice_both_stream_in_24_V_strb_V_U_apdone_blk;
wire   [2:0] stream_in_24_TSTRB_int_regslice;
wire    regslice_both_stream_in_24_V_strb_V_U_vld_out;
wire    regslice_both_stream_in_24_V_strb_V_U_ack_in;
wire    regslice_both_stream_in_24_V_user_V_U_apdone_blk;
wire   [0:0] stream_in_24_TUSER_int_regslice;
wire    regslice_both_stream_in_24_V_user_V_U_vld_out;
wire    regslice_both_stream_in_24_V_user_V_U_ack_in;
wire    regslice_both_stream_in_24_V_last_V_U_apdone_blk;
wire   [0:0] stream_in_24_TLAST_int_regslice;
wire    regslice_both_stream_in_24_V_last_V_U_vld_out;
wire    regslice_both_stream_in_24_V_last_V_U_ack_in;
wire   [23:0] stream_out_24_TDATA_int_regslice;
reg    stream_out_24_TVALID_int_regslice;
wire    stream_out_24_TREADY_int_regslice;
wire    regslice_both_stream_out_24_V_data_V_U_vld_out;
wire    regslice_both_stream_out_24_V_keep_V_U_apdone_blk;
wire    regslice_both_stream_out_24_V_keep_V_U_ack_in_dummy;
wire    regslice_both_stream_out_24_V_keep_V_U_vld_out;
wire    regslice_both_stream_out_24_V_strb_V_U_apdone_blk;
wire    regslice_both_stream_out_24_V_strb_V_U_ack_in_dummy;
wire    regslice_both_stream_out_24_V_strb_V_U_vld_out;
wire    regslice_both_stream_out_24_V_user_V_U_apdone_blk;
wire    regslice_both_stream_out_24_V_user_V_U_ack_in_dummy;
wire    regslice_both_stream_out_24_V_user_V_U_vld_out;
wire    regslice_both_stream_out_24_V_last_V_U_apdone_blk;
wire    regslice_both_stream_out_24_V_last_V_U_ack_in_dummy;
wire    regslice_both_stream_out_24_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

color_convert_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .c1_c1(c1_c1),
    .c1_c2(c1_c2),
    .c1_c3(c1_c3),
    .c2_c1(c2_c1),
    .c2_c2(c2_c2),
    .c2_c3(c2_c3),
    .c3_c1(c3_c1),
    .c3_c2(c3_c2),
    .c3_c3(c3_c3),
    .bias_c1(bias_c1),
    .bias_c2(bias_c2),
    .bias_c3(bias_c3),
    .ap_local_deadlock(ap_local_deadlock)
);

color_convert_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U1(
    .din0(c1_c1_read_reg_1231),
    .din1(r_V_fu_315_p1),
    .dout(r_V_fu_315_p2)
);

color_convert_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U2(
    .din0(c1_c2_read_reg_1236),
    .din1(r_V_4_fu_331_p1),
    .dout(r_V_4_fu_331_p2)
);

color_convert_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U3(
    .din0(c2_c1_read_reg_1256),
    .din1(r_V_6_fu_344_p1),
    .dout(r_V_6_fu_344_p2)
);

color_convert_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U4(
    .din0(c2_c2_read_reg_1261),
    .din1(r_V_7_fu_357_p1),
    .dout(r_V_7_fu_357_p2)
);

color_convert_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U5(
    .din0(c3_c1_read_reg_1281),
    .din1(r_V_9_fu_370_p1),
    .dout(r_V_9_fu_370_p2)
);

color_convert_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U6(
    .din0(c3_c2_read_reg_1286),
    .din1(r_V_10_fu_383_p1),
    .dout(r_V_10_fu_383_p2)
);

color_convert_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U7(
    .din0(c1_c3_read_reg_1241_pp0_iter1_reg),
    .din1(r_V_5_fu_415_p1),
    .dout(r_V_5_fu_415_p2)
);

color_convert_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U8(
    .din0(c2_c3_read_reg_1266_pp0_iter1_reg),
    .din1(r_V_8_fu_452_p1),
    .dout(r_V_8_fu_452_p2)
);

color_convert_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U9(
    .din0(c3_c3_read_reg_1291_pp0_iter1_reg),
    .din1(r_V_11_fu_489_p1),
    .dout(r_V_11_fu_489_p2)
);

color_convert_regslice_both #(
    .DataWidth( 24 ))
regslice_both_stream_in_24_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_24_TDATA),
    .vld_in(stream_in_24_TVALID),
    .ack_in(regslice_both_stream_in_24_V_data_V_U_ack_in),
    .data_out(stream_in_24_TDATA_int_regslice),
    .vld_out(stream_in_24_TVALID_int_regslice),
    .ack_out(stream_in_24_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_24_V_data_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 3 ))
regslice_both_stream_in_24_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_24_TKEEP),
    .vld_in(stream_in_24_TVALID),
    .ack_in(regslice_both_stream_in_24_V_keep_V_U_ack_in),
    .data_out(stream_in_24_TKEEP_int_regslice),
    .vld_out(regslice_both_stream_in_24_V_keep_V_U_vld_out),
    .ack_out(stream_in_24_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_24_V_keep_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 3 ))
regslice_both_stream_in_24_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_24_TSTRB),
    .vld_in(stream_in_24_TVALID),
    .ack_in(regslice_both_stream_in_24_V_strb_V_U_ack_in),
    .data_out(stream_in_24_TSTRB_int_regslice),
    .vld_out(regslice_both_stream_in_24_V_strb_V_U_vld_out),
    .ack_out(stream_in_24_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_24_V_strb_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_in_24_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_24_TUSER),
    .vld_in(stream_in_24_TVALID),
    .ack_in(regslice_both_stream_in_24_V_user_V_U_ack_in),
    .data_out(stream_in_24_TUSER_int_regslice),
    .vld_out(regslice_both_stream_in_24_V_user_V_U_vld_out),
    .ack_out(stream_in_24_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_24_V_user_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_in_24_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_24_TLAST),
    .vld_in(stream_in_24_TVALID),
    .ack_in(regslice_both_stream_in_24_V_last_V_U_ack_in),
    .data_out(stream_in_24_TLAST_int_regslice),
    .vld_out(regslice_both_stream_in_24_V_last_V_U_vld_out),
    .ack_out(stream_in_24_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_24_V_last_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 24 ))
regslice_both_stream_out_24_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_out_24_TDATA_int_regslice),
    .vld_in(stream_out_24_TVALID_int_regslice),
    .ack_in(stream_out_24_TREADY_int_regslice),
    .data_out(stream_out_24_TDATA),
    .vld_out(regslice_both_stream_out_24_V_data_V_U_vld_out),
    .ack_out(stream_out_24_TREADY),
    .apdone_blk(regslice_both_stream_out_24_V_data_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 3 ))
regslice_both_stream_out_24_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_1196_pp0_iter4_reg),
    .vld_in(stream_out_24_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_24_V_keep_V_U_ack_in_dummy),
    .data_out(stream_out_24_TKEEP),
    .vld_out(regslice_both_stream_out_24_V_keep_V_U_vld_out),
    .ack_out(stream_out_24_TREADY),
    .apdone_blk(regslice_both_stream_out_24_V_keep_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 3 ))
regslice_both_stream_out_24_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_1201_pp0_iter4_reg),
    .vld_in(stream_out_24_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_24_V_strb_V_U_ack_in_dummy),
    .data_out(stream_out_24_TSTRB),
    .vld_out(regslice_both_stream_out_24_V_strb_V_U_vld_out),
    .ack_out(stream_out_24_TREADY),
    .apdone_blk(regslice_both_stream_out_24_V_strb_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_out_24_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_1206_pp0_iter4_reg),
    .vld_in(stream_out_24_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_24_V_user_V_U_ack_in_dummy),
    .data_out(stream_out_24_TUSER),
    .vld_out(regslice_both_stream_out_24_V_user_V_U_vld_out),
    .ack_out(stream_out_24_TREADY),
    .apdone_blk(regslice_both_stream_out_24_V_user_V_U_apdone_blk)
);

color_convert_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_out_24_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_1211_pp0_iter4_reg),
    .vld_in(stream_out_24_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_24_V_last_V_U_ack_in_dummy),
    .data_out(stream_out_24_TLAST),
    .vld_out(regslice_both_stream_out_24_V_last_V_U_vld_out),
    .ack_out(stream_out_24_TREADY),
    .apdone_blk(regslice_both_stream_out_24_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln1245_10_reg_1396 <= add_ln1245_10_fu_439_p2;
        add_ln1245_17_reg_1426 <= add_ln1245_17_fu_476_p2;
        add_ln1245_1_reg_1366 <= add_ln1245_1_fu_399_p2;
        and_ln790_1_reg_1601 <= and_ln790_1_fu_956_p2;
        and_ln790_2_reg_1624 <= and_ln790_2_fu_1027_p2;
        and_ln790_reg_1578 <= and_ln790_fu_885_p2;
        or_ln794_1_reg_1595 <= or_ln794_1_fu_945_p2;
        or_ln794_2_reg_1618 <= or_ln794_2_fu_1016_p2;
        or_ln794_reg_1572 <= or_ln794_fu_874_p2;
        p_Result_1_reg_1468 <= add_ln1245_3_fu_551_p2[32'd15];
        p_Result_2_reg_1491 <= ret_V_5_fu_645_p2[32'd19];
        p_Result_2_reg_1491_pp0_iter4_reg <= p_Result_2_reg_1491;
        p_Result_3_reg_1503 <= add_ln1245_9_fu_655_p2[32'd15];
        p_Result_4_reg_1526 <= ret_V_8_fu_749_p2[32'd19];
        p_Result_4_reg_1526_pp0_iter4_reg <= p_Result_4_reg_1526;
        p_Result_5_reg_1538 <= add_ln1245_15_fu_759_p2[32'd15];
        p_Result_s_reg_1456 <= ret_V_2_fu_541_p2[32'd19];
        p_Result_s_reg_1456_pp0_iter4_reg <= p_Result_s_reg_1456;
        p_Val2_2_reg_1463 <= {{add_ln1245_3_fu_551_p2[15:8]}};
        p_Val2_3_reg_1561 <= p_Val2_3_fu_825_p2;
        p_Val2_5_reg_1498 <= {{add_ln1245_9_fu_655_p2[15:8]}};
        p_Val2_6_reg_1584 <= p_Val2_6_fu_896_p2;
        p_Val2_8_reg_1533 <= {{add_ln1245_15_fu_759_p2[15:8]}};
        p_Val2_9_reg_1607 <= p_Val2_9_fu_967_p2;
        r_V_11_reg_1436 <= r_V_11_fu_489_p2;
        r_V_5_reg_1376 <= r_V_5_fu_415_p2;
        r_V_8_reg_1406 <= r_V_8_fu_452_p2;
        ret_V_3_reg_1401 <= ret_V_3_fu_443_p2;
        ret_V_6_reg_1431 <= ret_V_6_fu_480_p2;
        ret_V_reg_1371 <= ret_V_fu_403_p2;
        rhs_10_reg_1296_pp0_iter2_reg <= rhs_10_reg_1296_pp0_iter1_reg;
        rhs_2_reg_1246_pp0_iter2_reg <= rhs_2_reg_1246_pp0_iter1_reg;
        rhs_6_reg_1271_pp0_iter2_reg <= rhs_6_reg_1271_pp0_iter1_reg;
        tmp_13_reg_1544 <= add_ln1245_14_fu_755_p2[32'd7];
        tmp_1_reg_1485 <= {{ret_V_2_fu_541_p2[19:16]}};
        tmp_2_reg_1555 <= {{ret_V_8_fu_749_p2[19:16]}};
        tmp_5_reg_1474 <= add_ln1245_2_fu_547_p2[32'd7];
        tmp_9_reg_1509 <= add_ln1245_8_fu_651_p2[32'd7];
        tmp_keep_V_reg_1196_pp0_iter2_reg <= tmp_keep_V_reg_1196_pp0_iter1_reg;
        tmp_keep_V_reg_1196_pp0_iter3_reg <= tmp_keep_V_reg_1196_pp0_iter2_reg;
        tmp_keep_V_reg_1196_pp0_iter4_reg <= tmp_keep_V_reg_1196_pp0_iter3_reg;
        tmp_last_V_reg_1211_pp0_iter2_reg <= tmp_last_V_reg_1211_pp0_iter1_reg;
        tmp_last_V_reg_1211_pp0_iter3_reg <= tmp_last_V_reg_1211_pp0_iter2_reg;
        tmp_last_V_reg_1211_pp0_iter4_reg <= tmp_last_V_reg_1211_pp0_iter3_reg;
        tmp_reg_1520 <= {{ret_V_5_fu_645_p2[19:16]}};
        tmp_strb_V_reg_1201_pp0_iter2_reg <= tmp_strb_V_reg_1201_pp0_iter1_reg;
        tmp_strb_V_reg_1201_pp0_iter3_reg <= tmp_strb_V_reg_1201_pp0_iter2_reg;
        tmp_strb_V_reg_1201_pp0_iter4_reg <= tmp_strb_V_reg_1201_pp0_iter3_reg;
        tmp_user_V_reg_1206_pp0_iter2_reg <= tmp_user_V_reg_1206_pp0_iter1_reg;
        tmp_user_V_reg_1206_pp0_iter3_reg <= tmp_user_V_reg_1206_pp0_iter2_reg;
        tmp_user_V_reg_1206_pp0_iter4_reg <= tmp_user_V_reg_1206_pp0_iter3_reg;
        trunc_ln1245_10_reg_1441 <= trunc_ln1245_10_fu_495_p1;
        trunc_ln1245_11_reg_1446 <= trunc_ln1245_11_fu_499_p1;
        trunc_ln1245_12_reg_1451 <= trunc_ln1245_12_fu_503_p1;
        trunc_ln1245_14_reg_1301_pp0_iter2_reg <= trunc_ln1245_14_reg_1301_pp0_iter1_reg;
        trunc_ln1245_1_reg_1386 <= trunc_ln1245_1_fu_425_p1;
        trunc_ln1245_2_reg_1391 <= trunc_ln1245_2_fu_429_p1;
        trunc_ln1245_3_reg_1251_pp0_iter2_reg <= trunc_ln1245_3_reg_1251_pp0_iter1_reg;
        trunc_ln1245_5_reg_1411 <= trunc_ln1245_5_fu_458_p1;
        trunc_ln1245_6_reg_1416 <= trunc_ln1245_6_fu_462_p1;
        trunc_ln1245_7_reg_1421 <= trunc_ln1245_7_fu_466_p1;
        trunc_ln1245_8_reg_1276_pp0_iter2_reg <= trunc_ln1245_8_reg_1276_pp0_iter1_reg;
        trunc_ln1245_reg_1381 <= trunc_ln1245_fu_421_p1;
        trunc_ln415_3_reg_1480 <= {{add_ln1245_3_fu_551_p2[14:8]}};
        trunc_ln415_4_reg_1515 <= {{add_ln1245_9_fu_655_p2[14:8]}};
        trunc_ln415_5_reg_1550 <= {{add_ln1245_15_fu_759_p2[14:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (p_Result_2_reg_1491 == 1'd1))) begin
        add_ln775_1_reg_1590 <= add_ln775_1_fu_901_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (p_Result_4_reg_1526 == 1'd1))) begin
        add_ln775_2_reg_1613 <= add_ln775_2_fu_972_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (p_Result_s_reg_1456 == 1'd1))) begin
        add_ln775_reg_1567 <= add_ln775_fu_830_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c1_c1_read_reg_1231 <= c1_c1;
        c1_c2_read_reg_1236 <= c1_c2;
        c1_c3_read_reg_1241 <= c1_c3;
        c1_c3_read_reg_1241_pp0_iter1_reg <= c1_c3_read_reg_1241;
        c2_c1_read_reg_1256 <= c2_c1;
        c2_c2_read_reg_1261 <= c2_c2;
        c2_c3_read_reg_1266 <= c2_c3;
        c2_c3_read_reg_1266_pp0_iter1_reg <= c2_c3_read_reg_1266;
        c3_c1_read_reg_1281 <= c3_c1;
        c3_c2_read_reg_1286 <= c3_c2;
        c3_c3_read_reg_1291 <= c3_c3;
        c3_c3_read_reg_1291_pp0_iter1_reg <= c3_c3_read_reg_1291;
        r_V_10_reg_1356 <= r_V_10_fu_383_p2;
        r_V_4_reg_1316 <= r_V_4_fu_331_p2;
        r_V_6_reg_1326 <= r_V_6_fu_344_p2;
        r_V_7_reg_1336 <= r_V_7_fu_357_p2;
        r_V_9_reg_1346 <= r_V_9_fu_370_p2;
        r_V_reg_1306 <= r_V_fu_315_p2;
        rhs_10_reg_1296 <= bias_c3;
        rhs_10_reg_1296_pp0_iter1_reg <= rhs_10_reg_1296;
        rhs_2_reg_1246 <= bias_c1;
        rhs_2_reg_1246_pp0_iter1_reg <= rhs_2_reg_1246;
        rhs_6_reg_1271 <= bias_c2;
        rhs_6_reg_1271_pp0_iter1_reg <= rhs_6_reg_1271;
        tmp_keep_V_reg_1196 <= stream_in_24_TKEEP_int_regslice;
        tmp_keep_V_reg_1196_pp0_iter1_reg <= tmp_keep_V_reg_1196;
        tmp_last_V_reg_1211 <= stream_in_24_TLAST_int_regslice;
        tmp_last_V_reg_1211_pp0_iter1_reg <= tmp_last_V_reg_1211;
        tmp_strb_V_reg_1201 <= stream_in_24_TSTRB_int_regslice;
        tmp_strb_V_reg_1201_pp0_iter1_reg <= tmp_strb_V_reg_1201;
        tmp_user_V_reg_1206 <= stream_in_24_TUSER_int_regslice;
        tmp_user_V_reg_1206_pp0_iter1_reg <= tmp_user_V_reg_1206;
        trunc_ln1168_1_reg_1321 <= trunc_ln1168_1_fu_337_p1;
        trunc_ln1168_2_reg_1331 <= trunc_ln1168_2_fu_350_p1;
        trunc_ln1168_3_reg_1341 <= trunc_ln1168_3_fu_363_p1;
        trunc_ln1168_4_reg_1351 <= trunc_ln1168_4_fu_376_p1;
        trunc_ln1168_5_reg_1361 <= trunc_ln1168_5_fu_389_p1;
        trunc_ln1168_reg_1311 <= trunc_ln1168_fu_321_p1;
        trunc_ln1245_14_reg_1301 <= trunc_ln1245_14_fu_305_p1;
        trunc_ln1245_14_reg_1301_pp0_iter1_reg <= trunc_ln1245_14_reg_1301;
        trunc_ln1245_3_reg_1251 <= trunc_ln1245_3_fu_297_p1;
        trunc_ln1245_3_reg_1251_pp0_iter1_reg <= trunc_ln1245_3_reg_1251;
        trunc_ln1245_8_reg_1276 <= trunc_ln1245_8_fu_301_p1;
        trunc_ln1245_8_reg_1276_pp0_iter1_reg <= trunc_ln1245_8_reg_1276;
        v_p1_V_reg_1216 <= v_p1_V_fu_273_p1;
        v_p2_V_reg_1221 <= {{stream_in_24_TDATA_int_regslice[15:8]}};
        v_p3_V_reg_1226 <= {{stream_in_24_TDATA_int_regslice[23:16]}};
        v_p3_V_reg_1226_pp0_iter1_reg <= v_p3_V_reg_1226;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1))) begin
        stream_in_24_TDATA_blk_n = stream_in_24_TVALID_int_regslice;
    end else begin
        stream_in_24_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        stream_in_24_TREADY_int_regslice = 1'b1;
    end else begin
        stream_in_24_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        stream_out_24_TDATA_blk_n = stream_out_24_TREADY_int_regslice;
    end else begin
        stream_out_24_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        stream_out_24_TVALID_int_regslice = 1'b1;
    end else begin
        stream_out_24_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_1_fu_906_p2 = ((tmp_reg_1520 == 4'd15) ? 1'b1 : 1'b0);

assign Range1_all_ones_2_fu_977_p2 = ((tmp_2_reg_1555 == 4'd15) ? 1'b1 : 1'b0);

assign Range1_all_ones_fu_835_p2 = ((tmp_1_reg_1485 == 4'd15) ? 1'b1 : 1'b0);

assign Range1_all_zeros_1_fu_911_p2 = ((tmp_reg_1520 == 4'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_2_fu_982_p2 = ((tmp_2_reg_1555 == 4'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_840_p2 = ((tmp_1_reg_1485 == 4'd0) ? 1'b1 : 1'b0);

assign add_ln1245_10_fu_439_p2 = (trunc_ln1168_3_reg_1341 + trunc_ln1168_2_reg_1331);

assign add_ln1245_12_fu_738_p2 = (add_ln1245_17_reg_1426 + trunc_ln1245_12_reg_1451);

assign add_ln1245_14_fu_755_p2 = (trunc_ln1245_11_reg_1446 + trunc_ln1245_10_reg_1441);

assign add_ln1245_15_fu_759_p2 = (trunc_ln1245_s_fu_742_p3 + add_ln1245_12_fu_738_p2);

assign add_ln1245_17_fu_476_p2 = (trunc_ln1168_5_reg_1361 + trunc_ln1168_4_reg_1351);

assign add_ln1245_1_fu_399_p2 = (trunc_ln1168_1_reg_1321 + trunc_ln1168_reg_1311);

assign add_ln1245_2_fu_547_p2 = (trunc_ln1245_1_reg_1386 + trunc_ln1245_reg_1381);

assign add_ln1245_3_fu_551_p2 = (trunc_ln1245_4_fu_534_p3 + add_ln1245_fu_530_p2);

assign add_ln1245_6_fu_634_p2 = (add_ln1245_10_reg_1396 + trunc_ln1245_7_reg_1421);

assign add_ln1245_8_fu_651_p2 = (trunc_ln1245_6_reg_1416 + trunc_ln1245_5_reg_1411);

assign add_ln1245_9_fu_655_p2 = (trunc_ln1245_9_fu_638_p3 + add_ln1245_6_fu_634_p2);

assign add_ln1245_fu_530_p2 = (add_ln1245_1_reg_1366 + trunc_ln1245_2_reg_1391);

assign add_ln775_1_fu_901_p2 = (zext_ln415_3_fu_893_p1 + trunc_ln415_4_reg_1515);

assign add_ln775_2_fu_972_p2 = (zext_ln415_5_fu_964_p1 + trunc_ln415_5_reg_1550);

assign add_ln775_fu_830_p2 = (zext_ln415_1_fu_822_p1 + trunc_ln415_3_reg_1480);

assign and_ln709_1_fu_1103_p2 = (p_Result_2_reg_1491_pp0_iter4_reg & neg_src_6_fu_1088_p2);

assign and_ln709_2_fu_1154_p2 = (p_Result_4_reg_1526_pp0_iter4_reg & neg_src_7_fu_1139_p2);

assign and_ln709_fu_1052_p2 = (p_Result_s_reg_1456_pp0_iter4_reg & neg_src_fu_1037_p2);

assign and_ln790_1_fu_956_p2 = (p_Result_3_reg_1503 & and_ln790_4_fu_950_p2);

assign and_ln790_2_fu_1027_p2 = (p_Result_5_reg_1538 & and_ln790_5_fu_1021_p2);

assign and_ln790_3_fu_879_p2 = (carry_1_fu_853_p2 & Range1_all_ones_fu_835_p2);

assign and_ln790_4_fu_950_p2 = (carry_3_fu_924_p2 & Range1_all_ones_1_fu_906_p2);

assign and_ln790_5_fu_1021_p2 = (carry_5_fu_995_p2 & Range1_all_ones_2_fu_977_p2);

assign and_ln790_fu_885_p2 = (p_Result_1_reg_1468 & and_ln790_3_fu_879_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((regslice_both_stream_out_24_V_data_V_U_apdone_blk == 1'b1) | (stream_out_24_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (stream_out_24_TREADY_int_regslice == 1'b0)) | ((1'b1 == 1'b1) & (stream_in_24_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((regslice_both_stream_out_24_V_data_V_U_apdone_blk == 1'b1) | (stream_out_24_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (stream_out_24_TREADY_int_regslice == 1'b0)) | ((1'b1 == 1'b1) & (stream_in_24_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((regslice_both_stream_out_24_V_data_V_U_apdone_blk == 1'b1) | (stream_out_24_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (stream_out_24_TREADY_int_regslice == 1'b0)) | ((1'b1 == 1'b1) & (stream_in_24_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (stream_in_24_TVALID_int_regslice == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = (stream_out_24_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter6 = ((regslice_both_stream_out_24_V_data_V_U_apdone_blk == 1'b1) | (stream_out_24_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);


assign ap_local_deadlock = 1'd0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign carry_1_fu_853_p2 = (tmp_6_fu_845_p3 ^ 1'd1);

assign carry_3_fu_924_p2 = (tmp_10_fu_916_p3 ^ 1'd1);

assign carry_5_fu_995_p2 = (tmp_14_fu_987_p3 ^ 1'd1);

assign deleted_zeros_1_fu_938_p3 = ((p_Result_3_reg_1503[0:0] == 1'b1) ? select_ln787_1_fu_930_p3 : Range1_all_zeros_1_fu_911_p2);

assign deleted_zeros_2_fu_1009_p3 = ((p_Result_5_reg_1538[0:0] == 1'b1) ? select_ln787_2_fu_1001_p3 : Range1_all_zeros_2_fu_982_p2);

assign deleted_zeros_fu_867_p3 = ((p_Result_1_reg_1468[0:0] == 1'b1) ? select_ln787_fu_859_p3 : Range1_all_zeros_fu_840_p2);

assign neg_src_6_fu_1088_p2 = (1'd1 ^ and_ln790_1_reg_1601);

assign neg_src_7_fu_1139_p2 = (1'd1 ^ and_ln790_2_reg_1624);

assign neg_src_fu_1037_p2 = (1'd1 ^ and_ln790_reg_1578);

assign or_ln709_1_fu_1108_p2 = (overflow_1_fu_1083_p2 | and_ln709_1_fu_1103_p2);

assign or_ln709_2_fu_1159_p2 = (overflow_2_fu_1134_p2 | and_ln709_2_fu_1154_p2);

assign or_ln709_fu_1057_p2 = (overflow_fu_1032_p2 | and_ln709_fu_1052_p2);

assign or_ln794_1_fu_945_p2 = (p_Result_2_reg_1491 | deleted_zeros_1_fu_938_p3);

assign or_ln794_2_fu_1016_p2 = (p_Result_4_reg_1526 | deleted_zeros_2_fu_1009_p3);

assign or_ln794_fu_874_p2 = (p_Result_s_reg_1456 | deleted_zeros_fu_867_p3);

assign out1_V_fu_1076_p3 = ((or_ln709_fu_1057_p2[0:0] == 1'b1) ? select_ln394_fu_1069_p3 : p_Val2_3_reg_1561);

assign out2_V_fu_1127_p3 = ((or_ln709_1_fu_1108_p2[0:0] == 1'b1) ? select_ln394_1_fu_1120_p3 : p_Val2_6_reg_1584);

assign out3_V_fu_1178_p3 = ((or_ln709_2_fu_1159_p2[0:0] == 1'b1) ? select_ln394_2_fu_1171_p3 : p_Val2_9_reg_1607);

assign overflow_1_fu_1083_p2 = (or_ln794_1_reg_1595 ^ 1'd1);

assign overflow_2_fu_1134_p2 = (or_ln794_2_reg_1618 ^ 1'd1);

assign overflow_fu_1032_p2 = (or_ln794_reg_1572 ^ 1'd1);

assign p_Val2_3_fu_825_p2 = (zext_ln415_fu_819_p1 + p_Val2_2_reg_1463);

assign p_Val2_6_fu_896_p2 = (zext_ln415_2_fu_890_p1 + p_Val2_5_reg_1498);

assign p_Val2_9_fu_967_p2 = (zext_ln415_4_fu_961_p1 + p_Val2_8_reg_1533);

assign r_V_10_fu_383_p1 = zext_ln1171_1_fu_325_p1;

assign r_V_11_fu_489_p1 = zext_ln1171_2_fu_409_p1;

assign r_V_4_fu_331_p1 = zext_ln1171_1_fu_325_p1;

assign r_V_5_fu_415_p1 = zext_ln1171_2_fu_409_p1;

assign r_V_6_fu_344_p1 = zext_ln1171_fu_309_p1;

assign r_V_7_fu_357_p1 = zext_ln1171_1_fu_325_p1;

assign r_V_8_fu_452_p1 = zext_ln1171_2_fu_409_p1;

assign r_V_9_fu_370_p1 = zext_ln1171_fu_309_p1;

assign r_V_fu_315_p1 = zext_ln1171_fu_309_p1;

assign ret_V_1_fu_513_p2 = ($signed(sext_ln712_2_fu_507_p1) + $signed(sext_ln712_3_fu_510_p1));

assign ret_V_2_fu_541_p2 = ($signed(sext_ln1245_fu_526_p1) + $signed(ret_V_1_fu_513_p2));

assign ret_V_3_fu_443_p2 = ($signed(sext_ln712_5_fu_436_p1) + $signed(sext_ln712_4_fu_433_p1));

assign ret_V_4_fu_617_p2 = ($signed(sext_ln712_6_fu_611_p1) + $signed(sext_ln712_7_fu_614_p1));

assign ret_V_5_fu_645_p2 = ($signed(sext_ln1245_1_fu_630_p1) + $signed(ret_V_4_fu_617_p2));

assign ret_V_6_fu_480_p2 = ($signed(sext_ln712_9_fu_473_p1) + $signed(sext_ln712_8_fu_470_p1));

assign ret_V_7_fu_721_p2 = ($signed(sext_ln712_10_fu_715_p1) + $signed(sext_ln712_11_fu_718_p1));

assign ret_V_8_fu_749_p2 = ($signed(sext_ln1245_2_fu_734_p1) + $signed(ret_V_7_fu_721_p2));

assign ret_V_fu_403_p2 = ($signed(sext_ln712_1_fu_396_p1) + $signed(sext_ln712_fu_393_p1));

assign rhs_11_fu_727_p3 = {{rhs_10_reg_1296_pp0_iter2_reg}, {8'd0}};

assign rhs_3_fu_519_p3 = {{rhs_2_reg_1246_pp0_iter2_reg}, {8'd0}};

assign rhs_7_fu_623_p3 = {{rhs_6_reg_1271_pp0_iter2_reg}, {8'd0}};

assign select_ln394_1_fu_1120_p3 = ((or_ln794_1_reg_1595[0:0] == 1'b1) ? select_ln709_1_fu_1114_p3 : 8'd255);

assign select_ln394_2_fu_1171_p3 = ((or_ln794_2_reg_1618[0:0] == 1'b1) ? select_ln709_2_fu_1165_p3 : 8'd255);

assign select_ln394_fu_1069_p3 = ((or_ln794_reg_1572[0:0] == 1'b1) ? select_ln709_fu_1063_p3 : 8'd255);

assign select_ln396_1_fu_1093_p3 = ((and_ln790_1_reg_1601[0:0] == 1'b1) ? add_ln775_1_reg_1590 : 7'd0);

assign select_ln396_2_fu_1144_p3 = ((and_ln790_2_reg_1624[0:0] == 1'b1) ? add_ln775_2_reg_1613 : 7'd0);

assign select_ln396_fu_1042_p3 = ((and_ln790_reg_1578[0:0] == 1'b1) ? add_ln775_reg_1567 : 7'd0);

assign select_ln709_1_fu_1114_p3 = ((p_Result_2_reg_1491_pp0_iter4_reg[0:0] == 1'b1) ? zext_ln709_1_fu_1099_p1 : p_Val2_6_reg_1584);

assign select_ln709_2_fu_1165_p3 = ((p_Result_4_reg_1526_pp0_iter4_reg[0:0] == 1'b1) ? zext_ln709_2_fu_1150_p1 : p_Val2_9_reg_1607);

assign select_ln709_fu_1063_p3 = ((p_Result_s_reg_1456_pp0_iter4_reg[0:0] == 1'b1) ? zext_ln709_fu_1048_p1 : p_Val2_3_reg_1561);

assign select_ln787_1_fu_930_p3 = ((tmp_10_fu_916_p3[0:0] == 1'b1) ? Range1_all_zeros_1_fu_911_p2 : Range1_all_ones_1_fu_906_p2);

assign select_ln787_2_fu_1001_p3 = ((tmp_14_fu_987_p3[0:0] == 1'b1) ? Range1_all_zeros_2_fu_982_p2 : Range1_all_ones_2_fu_977_p2);

assign select_ln787_fu_859_p3 = ((tmp_6_fu_845_p3[0:0] == 1'b1) ? Range1_all_zeros_fu_840_p2 : Range1_all_ones_fu_835_p2);

assign sext_ln1245_1_fu_630_p1 = $signed(rhs_7_fu_623_p3);

assign sext_ln1245_2_fu_734_p1 = $signed(rhs_11_fu_727_p3);

assign sext_ln1245_fu_526_p1 = $signed(rhs_3_fu_519_p3);

assign sext_ln712_10_fu_715_p1 = $signed(ret_V_6_reg_1431);

assign sext_ln712_11_fu_718_p1 = r_V_11_reg_1436;

assign sext_ln712_1_fu_396_p1 = r_V_4_reg_1316;

assign sext_ln712_2_fu_507_p1 = $signed(ret_V_reg_1371);

assign sext_ln712_3_fu_510_p1 = r_V_5_reg_1376;

assign sext_ln712_4_fu_433_p1 = r_V_6_reg_1326;

assign sext_ln712_5_fu_436_p1 = r_V_7_reg_1336;

assign sext_ln712_6_fu_611_p1 = $signed(ret_V_3_reg_1401);

assign sext_ln712_7_fu_614_p1 = r_V_8_reg_1406;

assign sext_ln712_8_fu_470_p1 = r_V_9_reg_1346;

assign sext_ln712_9_fu_473_p1 = r_V_10_reg_1356;

assign sext_ln712_fu_393_p1 = r_V_reg_1306;

assign stream_in_24_TREADY = regslice_both_stream_in_24_V_data_V_U_ack_in;

assign stream_out_24_TDATA_int_regslice = {{{out3_V_fu_1178_p3}, {out2_V_fu_1127_p3}}, {out1_V_fu_1076_p3}};

assign stream_out_24_TVALID = regslice_both_stream_out_24_V_data_V_U_vld_out;

assign tmp_10_fu_916_p3 = p_Val2_6_fu_896_p2[32'd7];

assign tmp_14_fu_987_p3 = p_Val2_9_fu_967_p2[32'd7];

assign tmp_6_fu_845_p3 = p_Val2_3_fu_825_p2[32'd7];

assign trunc_ln1168_1_fu_337_p1 = r_V_4_fu_331_p2[15:0];

assign trunc_ln1168_2_fu_350_p1 = r_V_6_fu_344_p2[15:0];

assign trunc_ln1168_3_fu_363_p1 = r_V_7_fu_357_p2[15:0];

assign trunc_ln1168_4_fu_376_p1 = r_V_9_fu_370_p2[15:0];

assign trunc_ln1168_5_fu_389_p1 = r_V_10_fu_383_p2[15:0];

assign trunc_ln1168_fu_321_p1 = r_V_fu_315_p2[15:0];

assign trunc_ln1245_10_fu_495_p1 = r_V_11_fu_489_p2[7:0];

assign trunc_ln1245_11_fu_499_p1 = add_ln1245_17_fu_476_p2[7:0];

assign trunc_ln1245_12_fu_503_p1 = r_V_11_fu_489_p2[15:0];

assign trunc_ln1245_14_fu_305_p1 = bias_c3[7:0];

assign trunc_ln1245_1_fu_425_p1 = add_ln1245_1_fu_399_p2[7:0];

assign trunc_ln1245_2_fu_429_p1 = r_V_5_fu_415_p2[15:0];

assign trunc_ln1245_3_fu_297_p1 = bias_c1[7:0];

assign trunc_ln1245_4_fu_534_p3 = {{trunc_ln1245_3_reg_1251_pp0_iter2_reg}, {8'd0}};

assign trunc_ln1245_5_fu_458_p1 = r_V_8_fu_452_p2[7:0];

assign trunc_ln1245_6_fu_462_p1 = add_ln1245_10_fu_439_p2[7:0];

assign trunc_ln1245_7_fu_466_p1 = r_V_8_fu_452_p2[15:0];

assign trunc_ln1245_8_fu_301_p1 = bias_c2[7:0];

assign trunc_ln1245_9_fu_638_p3 = {{trunc_ln1245_8_reg_1276_pp0_iter2_reg}, {8'd0}};

assign trunc_ln1245_fu_421_p1 = r_V_5_fu_415_p2[7:0];

assign trunc_ln1245_s_fu_742_p3 = {{trunc_ln1245_14_reg_1301_pp0_iter2_reg}, {8'd0}};

assign v_p1_V_fu_273_p1 = stream_in_24_TDATA_int_regslice[7:0];

assign zext_ln1171_1_fu_325_p1 = v_p2_V_reg_1221;

assign zext_ln1171_2_fu_409_p1 = v_p3_V_reg_1226_pp0_iter1_reg;

assign zext_ln1171_fu_309_p1 = v_p1_V_reg_1216;

assign zext_ln415_1_fu_822_p1 = tmp_5_reg_1474;

assign zext_ln415_2_fu_890_p1 = tmp_9_reg_1509;

assign zext_ln415_3_fu_893_p1 = tmp_9_reg_1509;

assign zext_ln415_4_fu_961_p1 = tmp_13_reg_1544;

assign zext_ln415_5_fu_964_p1 = tmp_13_reg_1544;

assign zext_ln415_fu_819_p1 = tmp_5_reg_1474;

assign zext_ln709_1_fu_1099_p1 = select_ln396_1_fu_1093_p3;

assign zext_ln709_2_fu_1150_p1 = select_ln396_2_fu_1144_p3;

assign zext_ln709_fu_1048_p1 = select_ln396_fu_1042_p3;


reg find_kernel_block = 0;
// synthesis translate_off
`include "color_convert_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on


reg find_kernel_block = 0;
// synthesis translate_off
`include "color_convert_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //color_convert


