-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity color_convert is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_local_block : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    stream_in_24_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    stream_in_24_TVALID : IN STD_LOGIC;
    stream_in_24_TREADY : OUT STD_LOGIC;
    stream_in_24_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    stream_in_24_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    stream_in_24_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_24_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_out_24_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    stream_out_24_TVALID : OUT STD_LOGIC;
    stream_out_24_TREADY : IN STD_LOGIC;
    stream_out_24_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    stream_out_24_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    stream_out_24_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_24_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of color_convert is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "color_convert_color_convert,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.520000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1669,HLS_SYN_LUT=1871,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal c1_c1 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c2 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c3 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c1 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c2 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c3 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c1 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c2 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c3 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c1 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c2 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c3 : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_in_24_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal stream_out_24_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal tmp_keep_V_reg_1196 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal regslice_both_stream_out_24_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_keep_V_reg_1196_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_keep_V_reg_1196_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_keep_V_reg_1196_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_keep_V_reg_1196_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_strb_V_reg_1201 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_strb_V_reg_1201_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_strb_V_reg_1201_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_strb_V_reg_1201_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_strb_V_reg_1201_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_user_V_reg_1206 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_1206_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_1206_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_1206_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_1206_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_1211 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_1211_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_1211_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_1211_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_1211_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal v_p1_V_fu_273_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p1_V_reg_1216 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p2_V_reg_1221 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p3_V_reg_1226 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p3_V_reg_1226_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal c1_c1_read_reg_1231 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c2_read_reg_1236 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c3_read_reg_1241 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c3_read_reg_1241_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_2_reg_1246 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_2_reg_1246_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_2_reg_1246_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1245_3_fu_297_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_3_reg_1251 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_3_reg_1251_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_3_reg_1251_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal c2_c1_read_reg_1256 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c2_read_reg_1261 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c3_read_reg_1266 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c3_read_reg_1266_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_6_reg_1271 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_6_reg_1271_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_6_reg_1271_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1245_8_fu_301_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_8_reg_1276 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_8_reg_1276_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_8_reg_1276_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal c3_c1_read_reg_1281 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c2_read_reg_1286 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c3_read_reg_1291 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c3_read_reg_1291_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_10_reg_1296 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_10_reg_1296_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_10_reg_1296_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1245_14_fu_305_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_14_reg_1301 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_14_reg_1301_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_14_reg_1301_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_315_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_reg_1306 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1168_fu_321_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1168_reg_1311 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_fu_331_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_reg_1316 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1168_1_fu_337_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1168_1_reg_1321 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_6_fu_344_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_6_reg_1326 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1168_2_fu_350_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1168_2_reg_1331 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_7_fu_357_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_7_reg_1336 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1168_3_fu_363_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1168_3_reg_1341 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_9_fu_370_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_9_reg_1346 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1168_4_fu_376_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1168_4_reg_1351 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_10_fu_383_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_10_reg_1356 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1168_5_fu_389_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1168_5_reg_1361 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1245_1_fu_399_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1245_1_reg_1366 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_fu_403_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_reg_1371 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_5_fu_415_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_5_reg_1376 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1245_fu_421_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_reg_1381 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_1_fu_425_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_1_reg_1386 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_2_fu_429_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1245_2_reg_1391 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1245_10_fu_439_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1245_10_reg_1396 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_3_fu_443_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_3_reg_1401 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_8_fu_452_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_8_reg_1406 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1245_5_fu_458_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_5_reg_1411 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_6_fu_462_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_6_reg_1416 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_7_fu_466_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1245_7_reg_1421 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1245_17_fu_476_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1245_17_reg_1426 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_6_fu_480_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_6_reg_1431 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_11_fu_489_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_11_reg_1436 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1245_10_fu_495_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_10_reg_1441 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_11_fu_499_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_11_reg_1446 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1245_12_fu_503_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1245_12_reg_1451 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_reg_1456 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1456_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_reg_1463 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_reg_1468 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1474 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln415_3_reg_1480 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_1485 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_2_reg_1491 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_reg_1491_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_reg_1498 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_reg_1503 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_1509 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln415_4_reg_1515 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_1520 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_4_reg_1526 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_reg_1526_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_reg_1533 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_5_reg_1538 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1544 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln415_5_reg_1550 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_reg_1555 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_3_fu_825_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_reg_1561 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln775_fu_830_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln775_reg_1567 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln794_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln794_reg_1572 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln790_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln790_reg_1578 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_fu_896_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_6_reg_1584 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln775_1_fu_901_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln775_1_reg_1590 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln794_1_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln794_1_reg_1595 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln790_1_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln790_1_reg_1601 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_fu_967_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_9_reg_1607 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln775_2_fu_972_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln775_2_reg_1613 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln794_2_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln794_2_reg_1618 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln790_2_fu_1027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln790_2_reg_1624 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal r_V_fu_315_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1171_fu_309_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_fu_331_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1171_1_fu_325_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_6_fu_344_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_7_fu_357_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_9_fu_370_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_10_fu_383_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln712_1_fu_396_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln712_fu_393_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_5_fu_415_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1171_2_fu_409_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln712_5_fu_436_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln712_4_fu_433_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_8_fu_452_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln712_9_fu_473_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln712_8_fu_470_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_11_fu_489_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln712_2_fu_507_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln712_3_fu_510_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal rhs_3_fu_519_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1245_fu_526_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_1_fu_513_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1245_4_fu_534_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1245_fu_530_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_2_fu_541_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1245_3_fu_551_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1245_2_fu_547_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln712_6_fu_611_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln712_7_fu_614_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal rhs_7_fu_623_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1245_1_fu_630_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_4_fu_617_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1245_9_fu_638_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1245_6_fu_634_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_5_fu_645_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1245_9_fu_655_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1245_8_fu_651_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln712_10_fu_715_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln712_11_fu_718_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal rhs_11_fu_727_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1245_2_fu_734_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_7_fu_721_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1245_s_fu_742_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1245_12_fu_738_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_8_fu_749_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1245_15_fu_759_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1245_14_fu_755_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln415_fu_819_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln415_1_fu_822_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_845_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln787_fu_859_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_867_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln790_3_fu_879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_2_fu_890_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln415_3_fu_893_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_916_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_fu_906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln787_1_fu_930_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_1_fu_938_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_3_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln790_4_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_4_fu_961_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln415_5_fu_964_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_fu_987_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_2_fu_982_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_2_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln787_2_fu_1001_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_2_fu_1009_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_5_fu_995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln790_5_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln396_fu_1042_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal neg_src_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln709_fu_1052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln709_fu_1048_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln709_fu_1063_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln709_fu_1057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln394_fu_1069_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln396_1_fu_1093_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal neg_src_6_fu_1088_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln709_1_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_1083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln709_1_fu_1099_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln709_1_fu_1114_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln709_1_fu_1108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln394_1_fu_1120_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln396_2_fu_1144_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal neg_src_7_fu_1139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln709_2_fu_1154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_2_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln709_2_fu_1150_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln709_2_fu_1165_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln709_2_fu_1159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln394_2_fu_1171_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out3_V_fu_1178_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out2_V_fu_1127_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out1_V_fu_1076_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_stream_in_24_V_data_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_24_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_in_24_TVALID_int_regslice : STD_LOGIC;
    signal stream_in_24_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_stream_in_24_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_24_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_24_TKEEP_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_stream_in_24_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_24_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_24_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_24_TSTRB_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_stream_in_24_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_24_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_24_V_user_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_24_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_stream_in_24_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_24_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_24_V_last_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_24_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_stream_in_24_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_24_V_last_V_U_ack_in : STD_LOGIC;
    signal stream_out_24_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_24_TVALID_int_regslice : STD_LOGIC;
    signal stream_out_24_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_stream_out_24_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_24_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_stream_out_24_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_24_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_24_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_stream_out_24_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_24_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_24_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_stream_out_24_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_24_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_24_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_stream_out_24_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_24_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component color_convert_mul_10s_8ns_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component color_convert_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        c1_c1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c1_c2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c1_c3 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c2_c1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c2_c2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c2_c3 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c3_c1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c3_c2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c3_c3 : OUT STD_LOGIC_VECTOR (9 downto 0);
        bias_c1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        bias_c2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        bias_c3 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component color_convert_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component color_convert_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        c1_c1 => c1_c1,
        c1_c2 => c1_c2,
        c1_c3 => c1_c3,
        c2_c1 => c2_c1,
        c2_c2 => c2_c2,
        c2_c3 => c2_c3,
        c3_c1 => c3_c1,
        c3_c2 => c3_c2,
        c3_c3 => c3_c3,
        bias_c1 => bias_c1,
        bias_c2 => bias_c2,
        bias_c3 => bias_c3,
        ap_local_deadlock => ap_local_deadlock);

    mul_10s_8ns_18_1_1_U1 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c1_c1_read_reg_1231,
        din1 => r_V_fu_315_p1,
        dout => r_V_fu_315_p2);

    mul_10s_8ns_18_1_1_U2 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c1_c2_read_reg_1236,
        din1 => r_V_4_fu_331_p1,
        dout => r_V_4_fu_331_p2);

    mul_10s_8ns_18_1_1_U3 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c2_c1_read_reg_1256,
        din1 => r_V_6_fu_344_p1,
        dout => r_V_6_fu_344_p2);

    mul_10s_8ns_18_1_1_U4 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c2_c2_read_reg_1261,
        din1 => r_V_7_fu_357_p1,
        dout => r_V_7_fu_357_p2);

    mul_10s_8ns_18_1_1_U5 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c3_c1_read_reg_1281,
        din1 => r_V_9_fu_370_p1,
        dout => r_V_9_fu_370_p2);

    mul_10s_8ns_18_1_1_U6 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c3_c2_read_reg_1286,
        din1 => r_V_10_fu_383_p1,
        dout => r_V_10_fu_383_p2);

    mul_10s_8ns_18_1_1_U7 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c1_c3_read_reg_1241_pp0_iter1_reg,
        din1 => r_V_5_fu_415_p1,
        dout => r_V_5_fu_415_p2);

    mul_10s_8ns_18_1_1_U8 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c2_c3_read_reg_1266_pp0_iter1_reg,
        din1 => r_V_8_fu_452_p1,
        dout => r_V_8_fu_452_p2);

    mul_10s_8ns_18_1_1_U9 : component color_convert_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => c3_c3_read_reg_1291_pp0_iter1_reg,
        din1 => r_V_11_fu_489_p1,
        dout => r_V_11_fu_489_p2);

    regslice_both_stream_in_24_V_data_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_24_TDATA,
        vld_in => stream_in_24_TVALID,
        ack_in => regslice_both_stream_in_24_V_data_V_U_ack_in,
        data_out => stream_in_24_TDATA_int_regslice,
        vld_out => stream_in_24_TVALID_int_regslice,
        ack_out => stream_in_24_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_24_V_data_V_U_apdone_blk);

    regslice_both_stream_in_24_V_keep_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_24_TKEEP,
        vld_in => stream_in_24_TVALID,
        ack_in => regslice_both_stream_in_24_V_keep_V_U_ack_in,
        data_out => stream_in_24_TKEEP_int_regslice,
        vld_out => regslice_both_stream_in_24_V_keep_V_U_vld_out,
        ack_out => stream_in_24_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_24_V_keep_V_U_apdone_blk);

    regslice_both_stream_in_24_V_strb_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_24_TSTRB,
        vld_in => stream_in_24_TVALID,
        ack_in => regslice_both_stream_in_24_V_strb_V_U_ack_in,
        data_out => stream_in_24_TSTRB_int_regslice,
        vld_out => regslice_both_stream_in_24_V_strb_V_U_vld_out,
        ack_out => stream_in_24_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_24_V_strb_V_U_apdone_blk);

    regslice_both_stream_in_24_V_user_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_24_TUSER,
        vld_in => stream_in_24_TVALID,
        ack_in => regslice_both_stream_in_24_V_user_V_U_ack_in,
        data_out => stream_in_24_TUSER_int_regslice,
        vld_out => regslice_both_stream_in_24_V_user_V_U_vld_out,
        ack_out => stream_in_24_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_24_V_user_V_U_apdone_blk);

    regslice_both_stream_in_24_V_last_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_24_TLAST,
        vld_in => stream_in_24_TVALID,
        ack_in => regslice_both_stream_in_24_V_last_V_U_ack_in,
        data_out => stream_in_24_TLAST_int_regslice,
        vld_out => regslice_both_stream_in_24_V_last_V_U_vld_out,
        ack_out => stream_in_24_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_24_V_last_V_U_apdone_blk);

    regslice_both_stream_out_24_V_data_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_out_24_TDATA_int_regslice,
        vld_in => stream_out_24_TVALID_int_regslice,
        ack_in => stream_out_24_TREADY_int_regslice,
        data_out => stream_out_24_TDATA,
        vld_out => regslice_both_stream_out_24_V_data_V_U_vld_out,
        ack_out => stream_out_24_TREADY,
        apdone_blk => regslice_both_stream_out_24_V_data_V_U_apdone_blk);

    regslice_both_stream_out_24_V_keep_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_1196_pp0_iter4_reg,
        vld_in => stream_out_24_TVALID_int_regslice,
        ack_in => regslice_both_stream_out_24_V_keep_V_U_ack_in_dummy,
        data_out => stream_out_24_TKEEP,
        vld_out => regslice_both_stream_out_24_V_keep_V_U_vld_out,
        ack_out => stream_out_24_TREADY,
        apdone_blk => regslice_both_stream_out_24_V_keep_V_U_apdone_blk);

    regslice_both_stream_out_24_V_strb_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_1201_pp0_iter4_reg,
        vld_in => stream_out_24_TVALID_int_regslice,
        ack_in => regslice_both_stream_out_24_V_strb_V_U_ack_in_dummy,
        data_out => stream_out_24_TSTRB,
        vld_out => regslice_both_stream_out_24_V_strb_V_U_vld_out,
        ack_out => stream_out_24_TREADY,
        apdone_blk => regslice_both_stream_out_24_V_strb_V_U_apdone_blk);

    regslice_both_stream_out_24_V_user_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_1206_pp0_iter4_reg,
        vld_in => stream_out_24_TVALID_int_regslice,
        ack_in => regslice_both_stream_out_24_V_user_V_U_ack_in_dummy,
        data_out => stream_out_24_TUSER,
        vld_out => regslice_both_stream_out_24_V_user_V_U_vld_out,
        ack_out => stream_out_24_TREADY,
        apdone_blk => regslice_both_stream_out_24_V_user_V_U_apdone_blk);

    regslice_both_stream_out_24_V_last_V_U : component color_convert_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_last_V_reg_1211_pp0_iter4_reg,
        vld_in => stream_out_24_TVALID_int_regslice,
        ack_in => regslice_both_stream_out_24_V_last_V_U_ack_in_dummy,
        data_out => stream_out_24_TLAST,
        vld_out => regslice_both_stream_out_24_V_last_V_U_vld_out,
        ack_out => stream_out_24_TREADY,
        apdone_blk => regslice_both_stream_out_24_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln1245_10_reg_1396 <= add_ln1245_10_fu_439_p2;
                add_ln1245_17_reg_1426 <= add_ln1245_17_fu_476_p2;
                add_ln1245_1_reg_1366 <= add_ln1245_1_fu_399_p2;
                and_ln790_1_reg_1601 <= and_ln790_1_fu_956_p2;
                and_ln790_2_reg_1624 <= and_ln790_2_fu_1027_p2;
                and_ln790_reg_1578 <= and_ln790_fu_885_p2;
                or_ln794_1_reg_1595 <= or_ln794_1_fu_945_p2;
                or_ln794_2_reg_1618 <= or_ln794_2_fu_1016_p2;
                or_ln794_reg_1572 <= or_ln794_fu_874_p2;
                p_Result_1_reg_1468 <= add_ln1245_3_fu_551_p2(15 downto 15);
                p_Result_2_reg_1491 <= ret_V_5_fu_645_p2(19 downto 19);
                p_Result_2_reg_1491_pp0_iter4_reg <= p_Result_2_reg_1491;
                p_Result_3_reg_1503 <= add_ln1245_9_fu_655_p2(15 downto 15);
                p_Result_4_reg_1526 <= ret_V_8_fu_749_p2(19 downto 19);
                p_Result_4_reg_1526_pp0_iter4_reg <= p_Result_4_reg_1526;
                p_Result_5_reg_1538 <= add_ln1245_15_fu_759_p2(15 downto 15);
                p_Result_s_reg_1456 <= ret_V_2_fu_541_p2(19 downto 19);
                p_Result_s_reg_1456_pp0_iter4_reg <= p_Result_s_reg_1456;
                p_Val2_2_reg_1463 <= add_ln1245_3_fu_551_p2(15 downto 8);
                p_Val2_3_reg_1561 <= p_Val2_3_fu_825_p2;
                p_Val2_5_reg_1498 <= add_ln1245_9_fu_655_p2(15 downto 8);
                p_Val2_6_reg_1584 <= p_Val2_6_fu_896_p2;
                p_Val2_8_reg_1533 <= add_ln1245_15_fu_759_p2(15 downto 8);
                p_Val2_9_reg_1607 <= p_Val2_9_fu_967_p2;
                r_V_11_reg_1436 <= r_V_11_fu_489_p2;
                r_V_5_reg_1376 <= r_V_5_fu_415_p2;
                r_V_8_reg_1406 <= r_V_8_fu_452_p2;
                ret_V_3_reg_1401 <= ret_V_3_fu_443_p2;
                ret_V_6_reg_1431 <= ret_V_6_fu_480_p2;
                ret_V_reg_1371 <= ret_V_fu_403_p2;
                rhs_10_reg_1296_pp0_iter2_reg <= rhs_10_reg_1296_pp0_iter1_reg;
                rhs_2_reg_1246_pp0_iter2_reg <= rhs_2_reg_1246_pp0_iter1_reg;
                rhs_6_reg_1271_pp0_iter2_reg <= rhs_6_reg_1271_pp0_iter1_reg;
                tmp_13_reg_1544 <= add_ln1245_14_fu_755_p2(7 downto 7);
                tmp_1_reg_1485 <= ret_V_2_fu_541_p2(19 downto 16);
                tmp_2_reg_1555 <= ret_V_8_fu_749_p2(19 downto 16);
                tmp_5_reg_1474 <= add_ln1245_2_fu_547_p2(7 downto 7);
                tmp_9_reg_1509 <= add_ln1245_8_fu_651_p2(7 downto 7);
                tmp_keep_V_reg_1196_pp0_iter2_reg <= tmp_keep_V_reg_1196_pp0_iter1_reg;
                tmp_keep_V_reg_1196_pp0_iter3_reg <= tmp_keep_V_reg_1196_pp0_iter2_reg;
                tmp_keep_V_reg_1196_pp0_iter4_reg <= tmp_keep_V_reg_1196_pp0_iter3_reg;
                tmp_last_V_reg_1211_pp0_iter2_reg <= tmp_last_V_reg_1211_pp0_iter1_reg;
                tmp_last_V_reg_1211_pp0_iter3_reg <= tmp_last_V_reg_1211_pp0_iter2_reg;
                tmp_last_V_reg_1211_pp0_iter4_reg <= tmp_last_V_reg_1211_pp0_iter3_reg;
                tmp_reg_1520 <= ret_V_5_fu_645_p2(19 downto 16);
                tmp_strb_V_reg_1201_pp0_iter2_reg <= tmp_strb_V_reg_1201_pp0_iter1_reg;
                tmp_strb_V_reg_1201_pp0_iter3_reg <= tmp_strb_V_reg_1201_pp0_iter2_reg;
                tmp_strb_V_reg_1201_pp0_iter4_reg <= tmp_strb_V_reg_1201_pp0_iter3_reg;
                tmp_user_V_reg_1206_pp0_iter2_reg <= tmp_user_V_reg_1206_pp0_iter1_reg;
                tmp_user_V_reg_1206_pp0_iter3_reg <= tmp_user_V_reg_1206_pp0_iter2_reg;
                tmp_user_V_reg_1206_pp0_iter4_reg <= tmp_user_V_reg_1206_pp0_iter3_reg;
                trunc_ln1245_10_reg_1441 <= trunc_ln1245_10_fu_495_p1;
                trunc_ln1245_11_reg_1446 <= trunc_ln1245_11_fu_499_p1;
                trunc_ln1245_12_reg_1451 <= trunc_ln1245_12_fu_503_p1;
                trunc_ln1245_14_reg_1301_pp0_iter2_reg <= trunc_ln1245_14_reg_1301_pp0_iter1_reg;
                trunc_ln1245_1_reg_1386 <= trunc_ln1245_1_fu_425_p1;
                trunc_ln1245_2_reg_1391 <= trunc_ln1245_2_fu_429_p1;
                trunc_ln1245_3_reg_1251_pp0_iter2_reg <= trunc_ln1245_3_reg_1251_pp0_iter1_reg;
                trunc_ln1245_5_reg_1411 <= trunc_ln1245_5_fu_458_p1;
                trunc_ln1245_6_reg_1416 <= trunc_ln1245_6_fu_462_p1;
                trunc_ln1245_7_reg_1421 <= trunc_ln1245_7_fu_466_p1;
                trunc_ln1245_8_reg_1276_pp0_iter2_reg <= trunc_ln1245_8_reg_1276_pp0_iter1_reg;
                trunc_ln1245_reg_1381 <= trunc_ln1245_fu_421_p1;
                trunc_ln415_3_reg_1480 <= add_ln1245_3_fu_551_p2(14 downto 8);
                trunc_ln415_4_reg_1515 <= add_ln1245_9_fu_655_p2(14 downto 8);
                trunc_ln415_5_reg_1550 <= add_ln1245_15_fu_759_p2(14 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_Result_2_reg_1491 = ap_const_lv1_1))) then
                add_ln775_1_reg_1590 <= add_ln775_1_fu_901_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_Result_4_reg_1526 = ap_const_lv1_1))) then
                add_ln775_2_reg_1613 <= add_ln775_2_fu_972_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_Result_s_reg_1456 = ap_const_lv1_1))) then
                add_ln775_reg_1567 <= add_ln775_fu_830_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                c1_c1_read_reg_1231 <= c1_c1;
                c1_c2_read_reg_1236 <= c1_c2;
                c1_c3_read_reg_1241 <= c1_c3;
                c1_c3_read_reg_1241_pp0_iter1_reg <= c1_c3_read_reg_1241;
                c2_c1_read_reg_1256 <= c2_c1;
                c2_c2_read_reg_1261 <= c2_c2;
                c2_c3_read_reg_1266 <= c2_c3;
                c2_c3_read_reg_1266_pp0_iter1_reg <= c2_c3_read_reg_1266;
                c3_c1_read_reg_1281 <= c3_c1;
                c3_c2_read_reg_1286 <= c3_c2;
                c3_c3_read_reg_1291 <= c3_c3;
                c3_c3_read_reg_1291_pp0_iter1_reg <= c3_c3_read_reg_1291;
                r_V_10_reg_1356 <= r_V_10_fu_383_p2;
                r_V_4_reg_1316 <= r_V_4_fu_331_p2;
                r_V_6_reg_1326 <= r_V_6_fu_344_p2;
                r_V_7_reg_1336 <= r_V_7_fu_357_p2;
                r_V_9_reg_1346 <= r_V_9_fu_370_p2;
                r_V_reg_1306 <= r_V_fu_315_p2;
                rhs_10_reg_1296 <= bias_c3;
                rhs_10_reg_1296_pp0_iter1_reg <= rhs_10_reg_1296;
                rhs_2_reg_1246 <= bias_c1;
                rhs_2_reg_1246_pp0_iter1_reg <= rhs_2_reg_1246;
                rhs_6_reg_1271 <= bias_c2;
                rhs_6_reg_1271_pp0_iter1_reg <= rhs_6_reg_1271;
                tmp_keep_V_reg_1196 <= stream_in_24_TKEEP_int_regslice;
                tmp_keep_V_reg_1196_pp0_iter1_reg <= tmp_keep_V_reg_1196;
                tmp_last_V_reg_1211 <= stream_in_24_TLAST_int_regslice;
                tmp_last_V_reg_1211_pp0_iter1_reg <= tmp_last_V_reg_1211;
                tmp_strb_V_reg_1201 <= stream_in_24_TSTRB_int_regslice;
                tmp_strb_V_reg_1201_pp0_iter1_reg <= tmp_strb_V_reg_1201;
                tmp_user_V_reg_1206 <= stream_in_24_TUSER_int_regslice;
                tmp_user_V_reg_1206_pp0_iter1_reg <= tmp_user_V_reg_1206;
                trunc_ln1168_1_reg_1321 <= trunc_ln1168_1_fu_337_p1;
                trunc_ln1168_2_reg_1331 <= trunc_ln1168_2_fu_350_p1;
                trunc_ln1168_3_reg_1341 <= trunc_ln1168_3_fu_363_p1;
                trunc_ln1168_4_reg_1351 <= trunc_ln1168_4_fu_376_p1;
                trunc_ln1168_5_reg_1361 <= trunc_ln1168_5_fu_389_p1;
                trunc_ln1168_reg_1311 <= trunc_ln1168_fu_321_p1;
                trunc_ln1245_14_reg_1301 <= trunc_ln1245_14_fu_305_p1;
                trunc_ln1245_14_reg_1301_pp0_iter1_reg <= trunc_ln1245_14_reg_1301;
                trunc_ln1245_3_reg_1251 <= trunc_ln1245_3_fu_297_p1;
                trunc_ln1245_3_reg_1251_pp0_iter1_reg <= trunc_ln1245_3_reg_1251;
                trunc_ln1245_8_reg_1276 <= trunc_ln1245_8_fu_301_p1;
                trunc_ln1245_8_reg_1276_pp0_iter1_reg <= trunc_ln1245_8_reg_1276;
                v_p1_V_reg_1216 <= v_p1_V_fu_273_p1;
                v_p2_V_reg_1221 <= stream_in_24_TDATA_int_regslice(15 downto 8);
                v_p3_V_reg_1226 <= stream_in_24_TDATA_int_regslice(23 downto 16);
                v_p3_V_reg_1226_pp0_iter1_reg <= v_p3_V_reg_1226;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Range1_all_ones_1_fu_906_p2 <= "1" when (tmp_reg_1520 = ap_const_lv4_F) else "0";
    Range1_all_ones_2_fu_977_p2 <= "1" when (tmp_2_reg_1555 = ap_const_lv4_F) else "0";
    Range1_all_ones_fu_835_p2 <= "1" when (tmp_1_reg_1485 = ap_const_lv4_F) else "0";
    Range1_all_zeros_1_fu_911_p2 <= "1" when (tmp_reg_1520 = ap_const_lv4_0) else "0";
    Range1_all_zeros_2_fu_982_p2 <= "1" when (tmp_2_reg_1555 = ap_const_lv4_0) else "0";
    Range1_all_zeros_fu_840_p2 <= "1" when (tmp_1_reg_1485 = ap_const_lv4_0) else "0";
    add_ln1245_10_fu_439_p2 <= std_logic_vector(unsigned(trunc_ln1168_3_reg_1341) + unsigned(trunc_ln1168_2_reg_1331));
    add_ln1245_12_fu_738_p2 <= std_logic_vector(unsigned(add_ln1245_17_reg_1426) + unsigned(trunc_ln1245_12_reg_1451));
    add_ln1245_14_fu_755_p2 <= std_logic_vector(unsigned(trunc_ln1245_11_reg_1446) + unsigned(trunc_ln1245_10_reg_1441));
    add_ln1245_15_fu_759_p2 <= std_logic_vector(unsigned(trunc_ln1245_s_fu_742_p3) + unsigned(add_ln1245_12_fu_738_p2));
    add_ln1245_17_fu_476_p2 <= std_logic_vector(unsigned(trunc_ln1168_5_reg_1361) + unsigned(trunc_ln1168_4_reg_1351));
    add_ln1245_1_fu_399_p2 <= std_logic_vector(unsigned(trunc_ln1168_1_reg_1321) + unsigned(trunc_ln1168_reg_1311));
    add_ln1245_2_fu_547_p2 <= std_logic_vector(unsigned(trunc_ln1245_1_reg_1386) + unsigned(trunc_ln1245_reg_1381));
    add_ln1245_3_fu_551_p2 <= std_logic_vector(unsigned(trunc_ln1245_4_fu_534_p3) + unsigned(add_ln1245_fu_530_p2));
    add_ln1245_6_fu_634_p2 <= std_logic_vector(unsigned(add_ln1245_10_reg_1396) + unsigned(trunc_ln1245_7_reg_1421));
    add_ln1245_8_fu_651_p2 <= std_logic_vector(unsigned(trunc_ln1245_6_reg_1416) + unsigned(trunc_ln1245_5_reg_1411));
    add_ln1245_9_fu_655_p2 <= std_logic_vector(unsigned(trunc_ln1245_9_fu_638_p3) + unsigned(add_ln1245_6_fu_634_p2));
    add_ln1245_fu_530_p2 <= std_logic_vector(unsigned(add_ln1245_1_reg_1366) + unsigned(trunc_ln1245_2_reg_1391));
    add_ln775_1_fu_901_p2 <= std_logic_vector(unsigned(zext_ln415_3_fu_893_p1) + unsigned(trunc_ln415_4_reg_1515));
    add_ln775_2_fu_972_p2 <= std_logic_vector(unsigned(zext_ln415_5_fu_964_p1) + unsigned(trunc_ln415_5_reg_1550));
    add_ln775_fu_830_p2 <= std_logic_vector(unsigned(zext_ln415_1_fu_822_p1) + unsigned(trunc_ln415_3_reg_1480));
    and_ln709_1_fu_1103_p2 <= (p_Result_2_reg_1491_pp0_iter4_reg and neg_src_6_fu_1088_p2);
    and_ln709_2_fu_1154_p2 <= (p_Result_4_reg_1526_pp0_iter4_reg and neg_src_7_fu_1139_p2);
    and_ln709_fu_1052_p2 <= (p_Result_s_reg_1456_pp0_iter4_reg and neg_src_fu_1037_p2);
    and_ln790_1_fu_956_p2 <= (p_Result_3_reg_1503 and and_ln790_4_fu_950_p2);
    and_ln790_2_fu_1027_p2 <= (p_Result_5_reg_1538 and and_ln790_5_fu_1021_p2);
    and_ln790_3_fu_879_p2 <= (carry_1_fu_853_p2 and Range1_all_ones_fu_835_p2);
    and_ln790_4_fu_950_p2 <= (carry_3_fu_924_p2 and Range1_all_ones_1_fu_906_p2);
    and_ln790_5_fu_1021_p2 <= (carry_5_fu_995_p2 and Range1_all_ones_2_fu_977_p2);
    and_ln790_fu_885_p2 <= (p_Result_1_reg_1468 and and_ln790_3_fu_879_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, regslice_both_stream_out_24_V_data_V_U_apdone_blk, stream_in_24_TVALID_int_regslice, stream_out_24_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((regslice_both_stream_out_24_V_data_V_U_apdone_blk = ap_const_logic_1) or (stream_out_24_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (stream_out_24_TREADY_int_regslice = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (stream_in_24_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, regslice_both_stream_out_24_V_data_V_U_apdone_blk, stream_in_24_TVALID_int_regslice, stream_out_24_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((regslice_both_stream_out_24_V_data_V_U_apdone_blk = ap_const_logic_1) or (stream_out_24_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (stream_out_24_TREADY_int_regslice = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (stream_in_24_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, regslice_both_stream_out_24_V_data_V_U_apdone_blk, stream_in_24_TVALID_int_regslice, stream_out_24_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((regslice_both_stream_out_24_V_data_V_U_apdone_blk = ap_const_logic_1) or (stream_out_24_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (stream_out_24_TREADY_int_regslice = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (stream_in_24_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(stream_in_24_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (stream_in_24_TVALID_int_regslice = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter5_assign_proc : process(stream_out_24_TREADY_int_regslice)
    begin
                ap_block_state6_pp0_stage0_iter5 <= (stream_out_24_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state7_pp0_stage0_iter6_assign_proc : process(regslice_both_stream_out_24_V_data_V_U_apdone_blk, stream_out_24_TREADY_int_regslice)
    begin
                ap_block_state7_pp0_stage0_iter6 <= ((regslice_both_stream_out_24_V_data_V_U_apdone_blk = ap_const_logic_1) or (stream_out_24_TREADY_int_regslice = ap_const_logic_0));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;
    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    carry_1_fu_853_p2 <= (tmp_6_fu_845_p3 xor ap_const_lv1_1);
    carry_3_fu_924_p2 <= (tmp_10_fu_916_p3 xor ap_const_lv1_1);
    carry_5_fu_995_p2 <= (tmp_14_fu_987_p3 xor ap_const_lv1_1);
    deleted_zeros_1_fu_938_p3 <= 
        select_ln787_1_fu_930_p3 when (p_Result_3_reg_1503(0) = '1') else 
        Range1_all_zeros_1_fu_911_p2;
    deleted_zeros_2_fu_1009_p3 <= 
        select_ln787_2_fu_1001_p3 when (p_Result_5_reg_1538(0) = '1') else 
        Range1_all_zeros_2_fu_982_p2;
    deleted_zeros_fu_867_p3 <= 
        select_ln787_fu_859_p3 when (p_Result_1_reg_1468(0) = '1') else 
        Range1_all_zeros_fu_840_p2;
    neg_src_6_fu_1088_p2 <= (ap_const_lv1_1 xor and_ln790_1_reg_1601);
    neg_src_7_fu_1139_p2 <= (ap_const_lv1_1 xor and_ln790_2_reg_1624);
    neg_src_fu_1037_p2 <= (ap_const_lv1_1 xor and_ln790_reg_1578);
    or_ln709_1_fu_1108_p2 <= (overflow_1_fu_1083_p2 or and_ln709_1_fu_1103_p2);
    or_ln709_2_fu_1159_p2 <= (overflow_2_fu_1134_p2 or and_ln709_2_fu_1154_p2);
    or_ln709_fu_1057_p2 <= (overflow_fu_1032_p2 or and_ln709_fu_1052_p2);
    or_ln794_1_fu_945_p2 <= (p_Result_2_reg_1491 or deleted_zeros_1_fu_938_p3);
    or_ln794_2_fu_1016_p2 <= (p_Result_4_reg_1526 or deleted_zeros_2_fu_1009_p3);
    or_ln794_fu_874_p2 <= (p_Result_s_reg_1456 or deleted_zeros_fu_867_p3);
    out1_V_fu_1076_p3 <= 
        select_ln394_fu_1069_p3 when (or_ln709_fu_1057_p2(0) = '1') else 
        p_Val2_3_reg_1561;
    out2_V_fu_1127_p3 <= 
        select_ln394_1_fu_1120_p3 when (or_ln709_1_fu_1108_p2(0) = '1') else 
        p_Val2_6_reg_1584;
    out3_V_fu_1178_p3 <= 
        select_ln394_2_fu_1171_p3 when (or_ln709_2_fu_1159_p2(0) = '1') else 
        p_Val2_9_reg_1607;
    overflow_1_fu_1083_p2 <= (or_ln794_1_reg_1595 xor ap_const_lv1_1);
    overflow_2_fu_1134_p2 <= (or_ln794_2_reg_1618 xor ap_const_lv1_1);
    overflow_fu_1032_p2 <= (or_ln794_reg_1572 xor ap_const_lv1_1);
    p_Val2_3_fu_825_p2 <= std_logic_vector(unsigned(zext_ln415_fu_819_p1) + unsigned(p_Val2_2_reg_1463));
    p_Val2_6_fu_896_p2 <= std_logic_vector(unsigned(zext_ln415_2_fu_890_p1) + unsigned(p_Val2_5_reg_1498));
    p_Val2_9_fu_967_p2 <= std_logic_vector(unsigned(zext_ln415_4_fu_961_p1) + unsigned(p_Val2_8_reg_1533));
    r_V_10_fu_383_p1 <= zext_ln1171_1_fu_325_p1(8 - 1 downto 0);
    r_V_11_fu_489_p1 <= zext_ln1171_2_fu_409_p1(8 - 1 downto 0);
    r_V_4_fu_331_p1 <= zext_ln1171_1_fu_325_p1(8 - 1 downto 0);
    r_V_5_fu_415_p1 <= zext_ln1171_2_fu_409_p1(8 - 1 downto 0);
    r_V_6_fu_344_p1 <= zext_ln1171_fu_309_p1(8 - 1 downto 0);
    r_V_7_fu_357_p1 <= zext_ln1171_1_fu_325_p1(8 - 1 downto 0);
    r_V_8_fu_452_p1 <= zext_ln1171_2_fu_409_p1(8 - 1 downto 0);
    r_V_9_fu_370_p1 <= zext_ln1171_fu_309_p1(8 - 1 downto 0);
    r_V_fu_315_p1 <= zext_ln1171_fu_309_p1(8 - 1 downto 0);
    ret_V_1_fu_513_p2 <= std_logic_vector(signed(sext_ln712_2_fu_507_p1) + signed(sext_ln712_3_fu_510_p1));
    ret_V_2_fu_541_p2 <= std_logic_vector(signed(sext_ln1245_fu_526_p1) + signed(ret_V_1_fu_513_p2));
    ret_V_3_fu_443_p2 <= std_logic_vector(signed(sext_ln712_5_fu_436_p1) + signed(sext_ln712_4_fu_433_p1));
    ret_V_4_fu_617_p2 <= std_logic_vector(signed(sext_ln712_6_fu_611_p1) + signed(sext_ln712_7_fu_614_p1));
    ret_V_5_fu_645_p2 <= std_logic_vector(signed(sext_ln1245_1_fu_630_p1) + signed(ret_V_4_fu_617_p2));
    ret_V_6_fu_480_p2 <= std_logic_vector(signed(sext_ln712_9_fu_473_p1) + signed(sext_ln712_8_fu_470_p1));
    ret_V_7_fu_721_p2 <= std_logic_vector(signed(sext_ln712_10_fu_715_p1) + signed(sext_ln712_11_fu_718_p1));
    ret_V_8_fu_749_p2 <= std_logic_vector(signed(sext_ln1245_2_fu_734_p1) + signed(ret_V_7_fu_721_p2));
    ret_V_fu_403_p2 <= std_logic_vector(signed(sext_ln712_1_fu_396_p1) + signed(sext_ln712_fu_393_p1));
    rhs_11_fu_727_p3 <= (rhs_10_reg_1296_pp0_iter2_reg & ap_const_lv8_0);
    rhs_3_fu_519_p3 <= (rhs_2_reg_1246_pp0_iter2_reg & ap_const_lv8_0);
    rhs_7_fu_623_p3 <= (rhs_6_reg_1271_pp0_iter2_reg & ap_const_lv8_0);
    select_ln394_1_fu_1120_p3 <= 
        select_ln709_1_fu_1114_p3 when (or_ln794_1_reg_1595(0) = '1') else 
        ap_const_lv8_FF;
    select_ln394_2_fu_1171_p3 <= 
        select_ln709_2_fu_1165_p3 when (or_ln794_2_reg_1618(0) = '1') else 
        ap_const_lv8_FF;
    select_ln394_fu_1069_p3 <= 
        select_ln709_fu_1063_p3 when (or_ln794_reg_1572(0) = '1') else 
        ap_const_lv8_FF;
    select_ln396_1_fu_1093_p3 <= 
        add_ln775_1_reg_1590 when (and_ln790_1_reg_1601(0) = '1') else 
        ap_const_lv7_0;
    select_ln396_2_fu_1144_p3 <= 
        add_ln775_2_reg_1613 when (and_ln790_2_reg_1624(0) = '1') else 
        ap_const_lv7_0;
    select_ln396_fu_1042_p3 <= 
        add_ln775_reg_1567 when (and_ln790_reg_1578(0) = '1') else 
        ap_const_lv7_0;
    select_ln709_1_fu_1114_p3 <= 
        zext_ln709_1_fu_1099_p1 when (p_Result_2_reg_1491_pp0_iter4_reg(0) = '1') else 
        p_Val2_6_reg_1584;
    select_ln709_2_fu_1165_p3 <= 
        zext_ln709_2_fu_1150_p1 when (p_Result_4_reg_1526_pp0_iter4_reg(0) = '1') else 
        p_Val2_9_reg_1607;
    select_ln709_fu_1063_p3 <= 
        zext_ln709_fu_1048_p1 when (p_Result_s_reg_1456_pp0_iter4_reg(0) = '1') else 
        p_Val2_3_reg_1561;
    select_ln787_1_fu_930_p3 <= 
        Range1_all_zeros_1_fu_911_p2 when (tmp_10_fu_916_p3(0) = '1') else 
        Range1_all_ones_1_fu_906_p2;
    select_ln787_2_fu_1001_p3 <= 
        Range1_all_zeros_2_fu_982_p2 when (tmp_14_fu_987_p3(0) = '1') else 
        Range1_all_ones_2_fu_977_p2;
    select_ln787_fu_859_p3 <= 
        Range1_all_zeros_fu_840_p2 when (tmp_6_fu_845_p3(0) = '1') else 
        Range1_all_ones_fu_835_p2;
        sext_ln1245_1_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_7_fu_623_p3),20));

        sext_ln1245_2_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_11_fu_727_p3),20));

        sext_ln1245_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_3_fu_519_p3),20));

        sext_ln712_10_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_6_reg_1431),20));

        sext_ln712_11_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_11_reg_1436),20));

        sext_ln712_1_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_4_reg_1316),19));

        sext_ln712_2_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_reg_1371),20));

        sext_ln712_3_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_reg_1376),20));

        sext_ln712_4_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_6_reg_1326),19));

        sext_ln712_5_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_7_reg_1336),19));

        sext_ln712_6_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_3_reg_1401),20));

        sext_ln712_7_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_8_reg_1406),20));

        sext_ln712_8_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_9_reg_1346),19));

        sext_ln712_9_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_10_reg_1356),19));

        sext_ln712_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_1306),19));


    stream_in_24_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, stream_in_24_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            stream_in_24_TDATA_blk_n <= stream_in_24_TVALID_int_regslice;
        else 
            stream_in_24_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_24_TREADY <= regslice_both_stream_in_24_V_data_V_U_ack_in;

    stream_in_24_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
            stream_in_24_TREADY_int_regslice <= ap_const_logic_1;
        else 
            stream_in_24_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    stream_out_24_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, stream_out_24_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            stream_out_24_TDATA_blk_n <= stream_out_24_TREADY_int_regslice;
        else 
            stream_out_24_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_24_TDATA_int_regslice <= ((out3_V_fu_1178_p3 & out2_V_fu_1127_p3) & out1_V_fu_1076_p3);
    stream_out_24_TVALID <= regslice_both_stream_out_24_V_data_V_U_vld_out;

    stream_out_24_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            stream_out_24_TVALID_int_regslice <= ap_const_logic_1;
        else 
            stream_out_24_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_916_p3 <= p_Val2_6_fu_896_p2(7 downto 7);
    tmp_14_fu_987_p3 <= p_Val2_9_fu_967_p2(7 downto 7);
    tmp_6_fu_845_p3 <= p_Val2_3_fu_825_p2(7 downto 7);
    trunc_ln1168_1_fu_337_p1 <= r_V_4_fu_331_p2(16 - 1 downto 0);
    trunc_ln1168_2_fu_350_p1 <= r_V_6_fu_344_p2(16 - 1 downto 0);
    trunc_ln1168_3_fu_363_p1 <= r_V_7_fu_357_p2(16 - 1 downto 0);
    trunc_ln1168_4_fu_376_p1 <= r_V_9_fu_370_p2(16 - 1 downto 0);
    trunc_ln1168_5_fu_389_p1 <= r_V_10_fu_383_p2(16 - 1 downto 0);
    trunc_ln1168_fu_321_p1 <= r_V_fu_315_p2(16 - 1 downto 0);
    trunc_ln1245_10_fu_495_p1 <= r_V_11_fu_489_p2(8 - 1 downto 0);
    trunc_ln1245_11_fu_499_p1 <= add_ln1245_17_fu_476_p2(8 - 1 downto 0);
    trunc_ln1245_12_fu_503_p1 <= r_V_11_fu_489_p2(16 - 1 downto 0);
    trunc_ln1245_14_fu_305_p1 <= bias_c3(8 - 1 downto 0);
    trunc_ln1245_1_fu_425_p1 <= add_ln1245_1_fu_399_p2(8 - 1 downto 0);
    trunc_ln1245_2_fu_429_p1 <= r_V_5_fu_415_p2(16 - 1 downto 0);
    trunc_ln1245_3_fu_297_p1 <= bias_c1(8 - 1 downto 0);
    trunc_ln1245_4_fu_534_p3 <= (trunc_ln1245_3_reg_1251_pp0_iter2_reg & ap_const_lv8_0);
    trunc_ln1245_5_fu_458_p1 <= r_V_8_fu_452_p2(8 - 1 downto 0);
    trunc_ln1245_6_fu_462_p1 <= add_ln1245_10_fu_439_p2(8 - 1 downto 0);
    trunc_ln1245_7_fu_466_p1 <= r_V_8_fu_452_p2(16 - 1 downto 0);
    trunc_ln1245_8_fu_301_p1 <= bias_c2(8 - 1 downto 0);
    trunc_ln1245_9_fu_638_p3 <= (trunc_ln1245_8_reg_1276_pp0_iter2_reg & ap_const_lv8_0);
    trunc_ln1245_fu_421_p1 <= r_V_5_fu_415_p2(8 - 1 downto 0);
    trunc_ln1245_s_fu_742_p3 <= (trunc_ln1245_14_reg_1301_pp0_iter2_reg & ap_const_lv8_0);
    v_p1_V_fu_273_p1 <= stream_in_24_TDATA_int_regslice(8 - 1 downto 0);
    zext_ln1171_1_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_p2_V_reg_1221),18));
    zext_ln1171_2_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_p3_V_reg_1226_pp0_iter1_reg),18));
    zext_ln1171_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_p1_V_reg_1216),18));
    zext_ln415_1_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_1474),7));
    zext_ln415_2_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_1509),8));
    zext_ln415_3_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_1509),7));
    zext_ln415_4_fu_961_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_1544),8));
    zext_ln415_5_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_1544),7));
    zext_ln415_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_1474),8));
    zext_ln709_1_fu_1099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln396_1_fu_1093_p3),8));
    zext_ln709_2_fu_1150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln396_2_fu_1144_p3),8));
    zext_ln709_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln396_fu_1042_p3),8));
end behav;
