// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pixel_unpack_pixel_unpack_Pipeline_VITIS_LOOP_85_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_out_24_TREADY,
        stream_in_32_TDATA,
        stream_in_32_TVALID,
        stream_in_32_TREADY,
        stream_in_32_TKEEP,
        stream_in_32_TSTRB,
        stream_in_32_TUSER,
        stream_in_32_TLAST,
        stream_out_24_TDATA,
        stream_out_24_TVALID,
        stream_out_24_TKEEP,
        stream_out_24_TSTRB,
        stream_out_24_TUSER,
        stream_out_24_TLAST
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   stream_out_24_TREADY;
input  [31:0] stream_in_32_TDATA;
input   stream_in_32_TVALID;
output   stream_in_32_TREADY;
input  [3:0] stream_in_32_TKEEP;
input  [3:0] stream_in_32_TSTRB;
input  [0:0] stream_in_32_TUSER;
input  [0:0] stream_in_32_TLAST;
output  [23:0] stream_out_24_TDATA;
output   stream_out_24_TVALID;
output  [2:0] stream_out_24_TKEEP;
output  [2:0] stream_out_24_TSTRB;
output  [0:0] stream_out_24_TUSER;
output  [0:0] stream_out_24_TLAST;

reg ap_idle;
reg stream_in_32_TREADY;
reg[23:0] stream_out_24_TDATA;
reg stream_out_24_TVALID;
reg[0:0] stream_out_24_TUSER;
reg[0:0] stream_out_24_TLAST;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
reg    ap_block_state2_pp0_stage1_iter0;
reg   [0:0] tmp_last_V_reg_169;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    stream_in_32_TDATA_blk_n;
reg    stream_out_24_TDATA_blk_n;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [7:0] tmp_s_reg_174;
wire   [7:0] tmp_1_fu_128_p4;
reg   [7:0] tmp_1_reg_179;
reg   [7:0] tmp_2_reg_184;
wire   [23:0] p_Result_s_fu_142_p3;
wire   [23:0] p_Result_1_fu_161_p4;
wire   [15:0] trunc_ln414_fu_138_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_loop_init;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

pixel_unpack_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (stream_out_24_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_in_32_TVALID == 1'b0) | (stream_out_24_TREADY == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_1_reg_179 <= {{stream_in_32_TDATA[31:24]}};
        tmp_2_reg_184 <= {{stream_in_32_TDATA[23:16]}};
        tmp_last_V_reg_169 <= stream_in_32_TLAST;
        tmp_s_reg_174 <= {{stream_in_32_TDATA[15:8]}};
    end
end

always @ (*) begin
    if (((stream_in_32_TVALID == 1'b0) | (stream_out_24_TREADY == 1'b0) | (ap_start_int == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_24_TREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_169 == 1'd1) & (stream_out_24_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (stream_out_24_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((stream_out_24_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        stream_in_32_TDATA_blk_n = stream_in_32_TVALID;
    end else begin
        stream_in_32_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((stream_in_32_TVALID == 1'b0) | (stream_out_24_TREADY == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_in_32_TREADY = 1'b1;
    end else begin
        stream_in_32_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((stream_out_24_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        stream_out_24_TDATA = p_Result_1_fu_161_p4;
    end else if ((~((stream_in_32_TVALID == 1'b0) | (stream_out_24_TREADY == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_out_24_TDATA = p_Result_s_fu_142_p3;
    end else begin
        stream_out_24_TDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1)))) begin
        stream_out_24_TDATA_blk_n = stream_out_24_TREADY;
    end else begin
        stream_out_24_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((stream_out_24_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        stream_out_24_TLAST = tmp_last_V_reg_169;
    end else if ((~((stream_in_32_TVALID == 1'b0) | (stream_out_24_TREADY == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_out_24_TLAST = 1'd0;
    end else begin
        stream_out_24_TLAST = 'bx;
    end
end

always @ (*) begin
    if (((stream_out_24_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        stream_out_24_TUSER = 1'd0;
    end else if ((~((stream_in_32_TVALID == 1'b0) | (stream_out_24_TREADY == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_out_24_TUSER = stream_in_32_TUSER;
    end else begin
        stream_out_24_TUSER = 'bx;
    end
end

always @ (*) begin
    if ((((stream_out_24_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((stream_in_32_TVALID == 1'b0) | (stream_out_24_TREADY == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        stream_out_24_TVALID = 1'b1;
    end else begin
        stream_out_24_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((stream_in_32_TVALID == 1'b0) | (stream_out_24_TREADY == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((stream_out_24_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((stream_in_32_TVALID == 1'b0) | (stream_out_24_TREADY == 1'b0) | (ap_start_int == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (stream_out_24_TREADY == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign p_Result_1_fu_161_p4 = {{{tmp_1_reg_179}, {tmp_s_reg_174}}, {tmp_2_reg_184}};

assign p_Result_s_fu_142_p3 = {{tmp_1_fu_128_p4}, {trunc_ln414_fu_138_p1}};

assign stream_out_24_TKEEP = 3'd0;

assign stream_out_24_TSTRB = 3'd0;

assign tmp_1_fu_128_p4 = {{stream_in_32_TDATA[31:24]}};

assign trunc_ln414_fu_138_p1 = stream_in_32_TDATA[15:0];

endmodule //pixel_unpack_pixel_unpack_Pipeline_VITIS_LOOP_85_9
